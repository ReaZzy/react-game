{"version":3,"sources":["components/Settings/Settings.tsx"],"names":["Setting","dispatch","useDispatch","musicVolume","useSelector","getMusicVolume","soundsVolume","getSoundsVolume","boardSize","getBoardSize","history","useHistory","difficulty","getDifficulty","className","Group","defaultValue","value","buttonStyle","onChange","e","setDifficulty","target","Button","setBoardSize","setMusicVolume","localStorage","setItem","setSoundsVolume","type","reader","FileReader","readAsDataURL","files","onloadend","base64data","result","setCardStyle","level","size","Text","keyboard","onClick","resetSettings","danger","goBack"],"mappings":"mHAAA,yHAkHeA,UAlGe,WAC1B,IAAMC,EAAWC,cACXC,EAAcC,YAAYC,KAC1BC,EAAeF,YAAYG,KAC3BC,EAAYJ,YAAYK,KACxBC,EAAUC,cACVC,EAAaR,YAAYS,KAgC/B,OACI,qBAAKC,UAAS,gBAAd,SACI,sBAAKA,UAAW,eAAhB,UACI,uBAAOA,UAAW,QAAlB,0BACA,eAAC,IAAMC,MAAP,CAAaC,aAAcJ,EAAYK,MAAOL,EAAYM,YAAY,QAAQC,SAP1D,SAACC,GAC7BnB,EAASoB,YAAcD,EAAEE,OAAOL,SAMxB,UACI,cAAC,IAAMM,OAAP,CAAcN,MAAM,OAApB,kBACA,cAAC,IAAMM,OAAP,CAAcN,MAAM,SAApB,oBACA,cAAC,IAAMM,OAAP,CAAcN,MAAM,OAApB,qBAEJ,uBAAOH,UAAW,QAAlB,0BACA,eAAC,IAAMC,MAAP,CAAaC,aAAcR,EAAWS,MAAOT,EAAWU,YAAY,QAAQC,SAhBzD,SAACC,GAC5BnB,EAASuB,YAAaJ,EAAEE,OAAOL,SAevB,UACI,cAAC,IAAMM,OAAP,CAAcN,MAAM,QAApB,mBACA,cAAC,IAAMM,OAAP,CAAcN,MAAM,SAApB,oBACA,cAAC,IAAMM,OAAP,CAAcN,MAAM,MAApB,iBACA,cAAC,IAAMM,OAAP,CAAcN,MAAM,OAApB,qBAEJ,uBAAOH,UAAW,QAAlB,qBACA,cAAC,IAAD,CAAQA,UAAW,SAAUG,MAAmB,IAAZd,EAAiBa,aAA0B,IAAZb,EAAiBgB,SA/BrE,SAACF,GACxBhB,EAASwB,YAAeR,EAAM,MAC9BS,aAAaC,QAAQ,cAArB,UAAuCV,EAAM,SA8BrC,uBAAOH,UAAW,QAAlB,sBACA,cAAC,IAAD,CAAQA,UAAW,SAAUG,MAAoB,IAAbX,EAAkBU,aAA2B,IAAbV,EAAkBa,SA7BtE,SAACF,GACzBhB,EAAS2B,YAAgBX,EAAM,MAC/BS,aAAaC,QAAQ,eAArB,UAAwCV,EAAM,SA4BtC,wBAAOH,UAAW,0BAAlB,wCACA,uBAAOe,KAAK,OAAOf,UAAW,aAAeK,SAhDxC,SAACC,GAAY,IAAD,EACnBU,EAAS,IAAIC,WACnBD,EAAOE,cAAP,UAAqBZ,EAAEE,cAAvB,aAAqB,EAAUW,MAAM,IACrCH,EAAOI,UAAY,WACf,IAAMC,EAAaL,EAAOM,OAE1BnC,EAASoC,YAAaF,IAEtBT,aAAaC,QAAQ,SAAUQ,UA2C3B,sBAAKrB,UAAW,UAAhB,UACI,cAAC,IAAD,CAAOwB,MAAO,EAAd,qBACA,gCACI,cAAC,IAAD,CAAQT,KAAM,SAAUU,KAAM,QAA9B,sBACA,cAAC,IAAWC,KAAZ,CAAiBC,UAAQ,EAAzB,iCAEJ,gCACI,cAAC,IAAD,CAAQZ,KAAM,SAAUU,KAAM,QAA9B,sBACA,cAAC,IAAWC,KAAZ,CAAiBC,UAAQ,EAAzB,yBAEJ,gCACI,cAAC,IAAD,CAAQZ,KAAM,SAAUU,KAAM,QAA9B,sBACA,cAAC,IAAWC,KAAZ,CAAiBC,UAAQ,EAAzB,sBAEJ,gCACI,cAAC,IAAD,CAAQZ,KAAM,SAAUU,KAAM,QAA9B,sBACA,cAAC,IAAWC,KAAZ,CAAiBC,UAAQ,EAAzB,mCAEJ,gCACI,cAAC,IAAD,CAAQZ,KAAM,SAAUU,KAAM,QAA9B,0BACA,cAAC,IAAWC,KAAZ,CAAiBC,UAAQ,EAAzB,8BAKR,cAAC,IAAD,CAAQ3B,UAAW,QAAS4B,QAAS,WAAKzC,EAAS0C,gBAAmBd,KAAK,UAAUe,QAAM,EAA3F,mBAGA,cAAC,IAAD,CAAS9B,UAAW,QAAS4B,QAAS,WAlF9ChC,EAAQmC,UAkFoDhB,KAAK,UAAzD,SACI,cAAC,oBAAD","file":"static/js/6.44427162.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Button, Radio, Slider, Typography} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    resetSettings,\r\n    setBoardSize,\r\n    setCardStyle,\r\n    setDifficulty,\r\n    setMusicVolume,\r\n    setSoundsVolume\r\n} from \"../../redux/game-reducer\";\r\nimport {getBoardSize, getDifficulty, getMusicVolume, getSoundsVolume} from \"../../redux/selectors/selectors\";\r\nimport {ArrowLeftOutlined} from \"@ant-design/icons/lib\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Title from \"antd/lib/typography/Title\";\r\n\r\nconst Setting: React.FC<{}> = () => {\r\n    const dispatch = useDispatch()\r\n    const musicVolume = useSelector(getMusicVolume)\r\n    const soundsVolume = useSelector(getSoundsVolume)\r\n    const boardSize = useSelector(getBoardSize)\r\n    const history = useHistory()\r\n    const difficulty = useSelector(getDifficulty)\r\n    const back = () => {\r\n        history.goBack()\r\n    }\r\n\r\n    const loadFile = (e: any) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(e.target?.files[0])\r\n        reader.onloadend = function() {\r\n            const base64data = reader.result;\r\n            //@ts-ignore\r\n            dispatch(setCardStyle(base64data))\r\n            //@ts-ignore\r\n            localStorage.setItem(\"imgURL\", base64data) // https://stackoverflow.com/questions/18650168/convert-blob-to-base64\r\n        }\r\n    }\r\n\r\n\r\n    const onAfterChangeMusic = (value: number) => {\r\n        dispatch(setMusicVolume(value/100))\r\n        localStorage.setItem(\"musicVolume\", `${value/100}`)\r\n    }\r\n    const onAfterChangeSounds = (value: number) => {\r\n        dispatch(setSoundsVolume(value/100))\r\n        localStorage.setItem(\"soundsVolume\", `${value/100}`)\r\n    }\r\n    const onAfterChangeBoardSize = (e: any) => {\r\n        dispatch(setBoardSize(e.target.value))\r\n    }\r\n    const onAfterChangeDifficulty = (e: any) => {\r\n        dispatch(setDifficulty(e.target.value))\r\n    }\r\n    return (\r\n        <div className={`menu settings`}>\r\n            <div className={\"menu-content\"}>\r\n                <label className={\"label\"}> Difficulty </label>\r\n                <Radio.Group defaultValue={difficulty} value={difficulty} buttonStyle=\"solid\" onChange={onAfterChangeDifficulty}>\r\n                    <Radio.Button value=\"easy\">Easy</Radio.Button>\r\n                    <Radio.Button value=\"normal\">Normal</Radio.Button>\r\n                    <Radio.Button value=\"hard\">Hard</Radio.Button>\r\n                </Radio.Group>\r\n                <label className={\"label\"}> Board size </label>\r\n                <Radio.Group defaultValue={boardSize} value={boardSize} buttonStyle=\"solid\" onChange={onAfterChangeBoardSize}>\r\n                    <Radio.Button value=\"small\">Small</Radio.Button>\r\n                    <Radio.Button value=\"normal\">Normal</Radio.Button>\r\n                    <Radio.Button value=\"big\">Big</Radio.Button>\r\n                    <Radio.Button value=\"huge\">Huge</Radio.Button>\r\n                </Radio.Group>\r\n                <label className={\"label\"}> Music </label>\r\n                <Slider className={\"slider\"} value={musicVolume*100} defaultValue={musicVolume*100} onChange={onAfterChangeMusic}/>\r\n                <label className={\"label\"}> Sounds </label>\r\n                <Slider className={\"slider\"} value={soundsVolume*100} defaultValue={soundsVolume*100} onChange={onAfterChangeSounds}/>\r\n                <label className={\"label label-input reset\"}> Upload your own card style\r\n                <input type=\"file\" className={\"file-input\"}  onChange={loadFile}/>\r\n                </label>\r\n\r\n                <div className={\"hotkeys\"}>\r\n                    <Title level={2}>Hotkeys</Title>\r\n                    <div>\r\n                        <Button type={\"dashed\"} size={\"large\"}>CTRL + Z</Button>\r\n                        <Typography.Text keyboard>Back to homepage</Typography.Text>\r\n                    </div>\r\n                    <div>\r\n                        <Button type={\"dashed\"} size={\"large\"}>CTRL + X</Button>\r\n                        <Typography.Text keyboard>Settings</Typography.Text>\r\n                    </div>\r\n                    <div>\r\n                        <Button type={\"dashed\"} size={\"large\"}>CTRL + C</Button>\r\n                        <Typography.Text keyboard>Stats</Typography.Text>\r\n                    </div>\r\n                    <div>\r\n                        <Button type={\"dashed\"} size={\"large\"}>CTRL + V</Button>\r\n                        <Typography.Text keyboard>Refresh your board</Typography.Text>\r\n                    </div>\r\n                    <div>\r\n                        <Button type={\"dashed\"} size={\"large\"}>CTRL + ENTER</Button>\r\n                        <Typography.Text keyboard>Start game</Typography.Text>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <Button className={\"reset\"} onClick={()=>{dispatch(resetSettings())}} type=\"primary\" danger>\r\n                    Reset\r\n                </Button>\r\n                <Button  className={\"reset\"} onClick={()=>{back()}} type=\"primary\">\r\n                    <ArrowLeftOutlined />\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setting"],"sourceRoot":""}