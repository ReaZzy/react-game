{"version":3,"sources":["sounds/wrong-audio.wav","sounds/correct-audio.wav","sounds/open-sound.wav","redux/game-reducer.ts","redux/selectors/selectors.ts","sounds/music.mp3","components/Card/Card.tsx","components/Game/Game.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["initialState","board","boardDisabled","cardPair","gameType","musicVolume","soundsVolume","boardSize","imgURL","openCardAudio","Audio","openAudio","wrongAnswerAudio","wrongAudio","correctAnswerAudio","correctAudio","openCard","number","type","setBoard","setAnswers","data","disableBoard","boolean","setGame","setCardPair","card","setCardPairs","cards","setMusicVolume","volume","setSoundsVolume","setBoardSize","setCardStyle","answer","dispatch","getState","a","game","wrong","play","setTimeout","correct","length","content","every","e","localStorage","setItem","JSON","stringify","map","backToMainMenu","boardItems","sort","Math","random","removeItem","refreshBoard","startGame","resetSettings","gameReducer","state","action","i","condition","boardSelector","disabledBoardSelector","cardPairSelector","getGameType","getSoundsVolume","getMusicVolume","getBoardSize","getImgURL","Card","index","useDispatch","useSelector","className","onClick","src","alt","id","Game","disabledBoard","size","to","Settings","React","lazy","App","useSound","music","Number","getItem","interrupt","stop","useEffect","lB","lT","lC","lMV","lSV","lBS","lMU","parse","Array","fill","path","render","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.77695285.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/wrong-audio.70fff5c7.wav\";","export default __webpack_public_path__ + \"static/media/correct-audio.62721562.wav\";","export default __webpack_public_path__ + \"static/media/open-sound.15057a5c.wav\";","import {CardType} from \"../App\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n// @ts-ignore\r\nimport wrongAudio from \"./../sounds/wrong-audio.wav\"\r\n// @ts-ignore\r\nimport correctAudio from \"./../sounds/correct-audio.wav\"\r\n// @ts-ignore\r\nimport openAudio from \"./../sounds/open-sound.wav\"\r\n\r\n\r\nexport type boardSizeType = \"small\" | \"normal\" | \"big\" | \"huge\"\r\nconst initialState = {\r\n    board: [] as Array<CardType>,\r\n    boardDisabled: false,\r\n    cardPair: [] as Array<CardType>,\r\n    gameType: \"wait\" as \"wait\" | \"playing\" | \"win\" | \"lose\",\r\n    musicVolume: 1,\r\n    soundsVolume: 1,\r\n    boardSize: \"normal\" as boardSizeType,\r\n    imgURL: null as string|null,\r\n};\r\ntype initialStateType = typeof initialState;\r\n\r\n\r\n// AUDIO\r\nconst openCardAudio = new Audio(openAudio)\r\nconst wrongAnswerAudio = new Audio(wrongAudio)\r\nconst correctAnswerAudio = new Audio(correctAudio)\r\n\r\n\r\n\r\nconst gameReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_BOARD\": {\r\n            return {\r\n                ...state,\r\n                board: [...action.board]\r\n            }\r\n        }\r\n        case \"OPEN_CARD\": {\r\n            openCardAudio.play()\r\n            return {\r\n                ...state,\r\n                board: state.board.map((board, i) => {\r\n                    return i === action.number ? {...board, type: \"open\"} : board\r\n                })\r\n            }\r\n        }\r\n        case \"SET_ANSWERS\": {\r\n            const {cardPair, type} = action.data\r\n            const condition = (e: CardType, type: \"wrong\" | \"correct\" | \"open\" | \"closed\") => {\r\n                return e.content === cardPair[0].content || e.content === cardPair[1].content\r\n                    ? {...e, type: type}\r\n                    : e\r\n            }\r\n            return {\r\n                ...state,\r\n                board: state.board.map((e: CardType) =>\r\n                    e.type === \"open\"\r\n                        ? condition(e, type)\r\n                        : e.type === \"wrong\" ? condition(e, type) : e\r\n                )\r\n            }\r\n        }\r\n        case \"SET_GAME_TYPE\": {\r\n            return {...state, gameType: action.gameType}\r\n        }\r\n        case \"SET_BOARD_SIZE\": {\r\n            return {...state, boardSize: action.boardSize}\r\n        }\r\n        case \"DISABLE_BOARD\": {\r\n            return {...state, boardDisabled: action.boolean}\r\n        }\r\n        case \"SET_SOUNDS_VOLUME\": {\r\n            return {...state, soundsVolume: action.volume}\r\n        }\r\n        case \"SET_MUSIC_VOLUME\": {\r\n            return {...state, musicVolume: action.volume}\r\n        }\r\n        case \"SET_CARD_PAIR\": {\r\n            return {...state, cardPair: [...state.cardPair, action.card]}\r\n        }\r\n        case \"SET_CARD_STYLE\": {\r\n            return {...state, imgURL: action.imgURL}\r\n        }\r\n        case \"SET_CARD_PAIRS\": {\r\n            return {...state, cardPair: [...action.cards]}\r\n        }\r\n\r\n        case \"CLEAR_CARD_PAIR\": {\r\n            return {...state, cardPair: []}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ActionsType =\r\n    openCardType\r\n    | setBoardType\r\n    | setAnswersType\r\n    | disableBoardType\r\n    | clearCardPairType\r\n    | setCardPairType\r\n    | setGameType\r\n    | setCardPairsType\r\n    | setSoundsVolumeType\r\n    | setMusicVolumeType\r\n    | setBoardSizeType\r\n    | setCardStyleType\r\n\r\nexport const openCard = (number: number): openCardType => ({\r\n    type: \"OPEN_CARD\",\r\n    number,\r\n});\r\ntype openCardType = {\r\n    type: \"OPEN_CARD\";\r\n    number: number;\r\n};\r\n\r\nexport const setBoard = (board: Array<CardType>): setBoardType => ({\r\n    type: \"SET_BOARD\",\r\n    board,\r\n});\r\ntype setBoardType = {\r\n    type: \"SET_BOARD\";\r\n    board: Array<CardType>;\r\n};\r\n\r\nexport const setAnswers = (cardPair: Array<CardType>, type: \"wrong\" | \"correct\" | \"closed\" | \"open\"): setAnswersType => ({\r\n    type: \"SET_ANSWERS\",\r\n    data: {\r\n        cardPair, type\r\n    }\r\n})\r\ntype setAnswersType = {\r\n    type: \"SET_ANSWERS\";\r\n    data: {\r\n        cardPair: Array<CardType>,\r\n        type: \"wrong\" | \"correct\" | \"closed\" | \"open\"\r\n    }\r\n}\r\n\r\nexport const disableBoard = (boolean: boolean): disableBoardType => ({type: \"DISABLE_BOARD\", boolean})\r\ntype disableBoardType = { type: \"DISABLE_BOARD\", boolean: boolean }\r\nexport const setGame = (gameType: \"wait\" | \"playing\" | \"win\" | \"lose\"): setGameType => ({\r\n    type: \"SET_GAME_TYPE\",\r\n    gameType\r\n})\r\ntype setGameType = { type: \"SET_GAME_TYPE\", gameType: \"wait\" | \"playing\" | \"win\" | \"lose\" }\r\n\r\nexport const setCardPair = (card: CardType): setCardPairType => ({type: \"SET_CARD_PAIR\", card})\r\ntype setCardPairType = { type: \"SET_CARD_PAIR\", card: CardType }\r\nexport const setCardPairs = (cards: Array<CardType>): setCardPairsType => ({type: \"SET_CARD_PAIRS\", cards})\r\ntype setCardPairsType = { type: \"SET_CARD_PAIRS\", cards: Array<CardType> }\r\nconst clearCardPair = (): clearCardPairType => ({type: \"CLEAR_CARD_PAIR\"})\r\ntype clearCardPairType = { type: \"CLEAR_CARD_PAIR\" }\r\nexport const setMusicVolume = (volume:number): setMusicVolumeType => ({type: \"SET_MUSIC_VOLUME\", volume})\r\ntype setMusicVolumeType = { type: \"SET_MUSIC_VOLUME\", volume:number }\r\nexport const setSoundsVolume = (volume:number): setSoundsVolumeType => ({type: \"SET_SOUNDS_VOLUME\", volume})\r\ntype setSoundsVolumeType = { type: \"SET_SOUNDS_VOLUME\", volume:number  }\r\nexport const setBoardSize = (boardSize:boardSizeType): setBoardSizeType => ({type: \"SET_BOARD_SIZE\", boardSize})\r\ntype setBoardSizeType = { type: \"SET_BOARD_SIZE\", boardSize:boardSizeType  }\r\nexport const setCardStyle = (imgURL: string ): setCardStyleType => ({type: \"SET_CARD_STYLE\", imgURL})\r\ntype setCardStyleType = { type: \"SET_CARD_STYLE\", imgURL:string  }\r\n\r\nexport const answer = (cardPair: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n\r\n    const {game} = getState()\r\n\r\n    openCardAudio.volume = game.soundsVolume\r\n    wrongAnswerAudio.volume = game.soundsVolume\r\n    correctAnswerAudio.volume = game.soundsVolume\r\n\r\n    const wrong = () => {\r\n        wrongAnswerAudio.play()\r\n        dispatch(disableBoard(true))\r\n        dispatch(setAnswers(cardPair, \"wrong\"))\r\n        setTimeout(() => {\r\n            dispatch(setAnswers(cardPair, \"closed\"))\r\n            dispatch(disableBoard(false))\r\n        }, 1000)\r\n    }\r\n    const correct = () => {\r\n        correctAnswerAudio.play()\r\n        dispatch(setAnswers(cardPair, \"correct\"))\r\n    }\r\n\r\n    if (cardPair.length === 2) {\r\n        cardPair[0].content === cardPair[1].content\r\n            ? correct()\r\n            : wrong()\r\n        dispatch(clearCardPair())\r\n    }\r\n\r\n    if (game.board.every((e: CardType) => e.type === \"correct\")) {\r\n        dispatch(setGame(\"win\"))\r\n    }\r\n\r\n    localStorage.setItem(\"board\", JSON.stringify(game.board.map((e: CardType) => e.type === \"wrong\" ? {\r\n        content: e.content,\r\n        type: \"closed\"\r\n    } : e)))\r\n    localStorage.setItem(\"gameType\", JSON.stringify(game.gameType))\r\n    localStorage.setItem(\"cardPair\", JSON.stringify(cardPair))\r\n}\r\n\r\nexport const backToMainMenu = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    dispatch(setGame(\"wait\"))\r\n    dispatch(setCardPairs([]))\r\n    dispatch(setBoard([...boardItems, ...boardItems].sort(() => 0.5 - Math.random())))\r\n    localStorage.removeItem(\"board\")\r\n    localStorage.removeItem(\"gameType\")\r\n    localStorage.removeItem(\"cardPair\")\r\n}\r\nexport const refreshBoard = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    openCardAudio.play()\r\n    dispatch(setCardPairs([]))\r\n    dispatch(setBoard([...boardItems, ...boardItems].sort(() => 0.5 - Math.random())))\r\n    localStorage.removeItem(\"cardPair\")\r\n}\r\n\r\nexport const startGame = (boardItems:Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    dispatch(setBoard([...boardItems, ...boardItems].sort(() => 0.5 - Math.random())))\r\n    dispatch(setGame(\"playing\"))\r\n    dispatch(setCardPairs([]))\r\n    localStorage.removeItem(\"cardPair\")\r\n}\r\nexport const resetSettings = (): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    dispatch(setCardStyle(\"\"))\r\n    localStorage.removeItem(\"imgURL\")\r\n}\r\n\r\nexport default gameReducer","import {AppStateType} from \"../store\";\r\n\r\nexport const boardSelector = (state:AppStateType)=> {\r\n    return state?.game?.board\r\n}\r\n\r\nexport const disabledBoardSelector = (state:AppStateType) => {\r\n    return state?.game?.boardDisabled\r\n}\r\nexport const cardPairSelector = (state:AppStateType) => {\r\n    return state?.game?.cardPair\r\n}\r\nexport const getGameType = (state:AppStateType) => {\r\n    return state?.game?.gameType\r\n}\r\nexport const getSoundsVolume = (state:AppStateType) => {\r\n    return state?.game?.soundsVolume\r\n}\r\nexport const getMusicVolume = (state:AppStateType) => {\r\n    return state?.game?.musicVolume\r\n}\r\nexport const getBoardSize = (state:AppStateType) => {\r\n    return state?.game?.boardSize\r\n}\r\nexport const getImgURL = (state:AppStateType) => {\r\n    return state?.game?.imgURL\r\n}\r\n","export default __webpack_public_path__ + \"static/media/music.601c07ae.mp3\";","import React from \"react\";\r\nimport {CardType} from \"../../App\";\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {openCard, setCardPair} from \"../../redux/game-reducer\";\r\nimport {getImgURL} from \"../../redux/selectors/selectors\";\r\n\r\ntype CardComponentType = {\r\n    card: CardType;\r\n    index: number;\r\n    cardPair: Array<CardType>\r\n};\r\n\r\n\r\n\r\nexport const Card: React.FC<CardComponentType> = (\r\n    {card, index}\r\n    ) => {\r\n    const dispatch = useDispatch()\r\n    const imgURL = useSelector(getImgURL)\r\n\r\n    const handleClick = (i: number) => {\r\n        if(card.type === \"closed\"){\r\n            dispatch(openCard(i))\r\n            dispatch(setCardPair(card))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`card ${card.type}`}\r\n               onClick={() => handleClick(index)}>\r\n            <div className={\"content\"}>\r\n                <div className={\"front\"}> {card.type !== \"closed\" && `${card.content}`} </div>\r\n                <div className={\"back\"}> {imgURL && <img src={`${imgURL}`} alt={\"card\"} id={\"output\"}/>} </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React  from \"react\";\r\nimport {Card} from \"../Card/Card\";\r\nimport {Button} from \"antd\";\r\nimport {backToMainMenu, refreshBoard, startGame} from \"../../redux/game-reducer\";\r\nimport {CardType} from \"../../App\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    boardSelector,\r\n    cardPairSelector,\r\n    disabledBoardSelector,\r\n    getBoardSize,\r\n    getGameType\r\n} from \"../../redux/selectors/selectors\";\r\nimport {ArrowLeftOutlined, CaretRightOutlined, ReloadOutlined, SettingOutlined} from \"@ant-design/icons/lib\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport const Game: React.FC<{boardItems:Array<CardType>}> = ({boardItems}) => {\r\n\r\n    const disabledBoard = useSelector(disabledBoardSelector)\r\n    const dispatch = useDispatch()\r\n    const gameType = useSelector(getGameType)\r\n    const board = useSelector(boardSelector)\r\n    const cardPair = useSelector(cardPairSelector)\r\n    const boardSize = useSelector(getBoardSize)\r\n\r\n    return (\r\n        <div>\r\n            {gameType === \"playing\"\r\n                ? <div className=\"appContent\">\r\n                    <div className=\"score\">\r\n                        <div>Current score: 14</div>\r\n                        <div>High score: 15</div>\r\n                    </div>\r\n                    <div className={`board ${boardSize} ${disabledBoard && \"disabled\"}`}>\r\n                        {board?.map((card: CardType, index: number) => {\r\n                            return (\r\n                                <Card cardPair={cardPair}\r\n                                      index={index}\r\n                                      card={card}\r\n                                      key={index}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    <Button onClick={() => {\r\n                        dispatch(refreshBoard(boardItems))\r\n                    }} className={\"reset-button\"} type=\"primary\" size={\"large\"}>\r\n                        <ReloadOutlined/>\r\n                    </Button>\r\n                    <Button onClick={() => {\r\n                        dispatch(backToMainMenu(boardItems))\r\n                    }} className={\"reset-button\"} type=\"primary\" size={\"large\"}>\r\n                        <ArrowLeftOutlined/>\r\n                    </Button>\r\n                </div>\r\n\r\n                : <div className={`menu ${gameType} ${boardSize}`}>\r\n                    <div className={\"menu-content\"}>\r\n                        <div className={\"text\"}>\r\n                            <div className={\"end-text\"}>\r\n                                {gameType === \"win\"\r\n                                    ? \"You won !\"\r\n                                    : gameType === \"lose\"\r\n                                        ? \"You lose :(\"\r\n                                        : gameType === \"wait\"\r\n                                        && \"Memory game\"\r\n                                }\r\n                            </div>\r\n                            <div>\r\n                                <div className={\"small-text\"}>\r\n                                    Current score:14 | High score: 15\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div>\r\n                            <Button type=\"primary\" size={\"large\"} onClick={() => {\r\n                                dispatch(startGame(boardItems))\r\n                            }}>\r\n                                {gameType !== \"wait\" ? \"Play again\" : \"Play\"} <CaretRightOutlined/>\r\n                            </Button>\r\n                            <Button type=\"primary\" size={\"large\"} onClick={()=>{dispatch(backToMainMenu(boardItems))}}>\r\n                                <Link to={\"/settings\"}><SettingOutlined/></Link>\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}","import React, {Suspense, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    answer,\n    setBoard,\n    setBoardSize,\n    setCardPairs, setCardStyle,\n    setGame,\n    setMusicVolume,\n    setSoundsVolume\n} from \"./redux/game-reducer\";\nimport {boardSelector, cardPairSelector, getBoardSize, getGameType, getMusicVolume} from \"./redux/selectors/selectors\";\nimport {Route, Switch} from \"react-router-dom\"\nimport 'antd/dist/antd.css';\n//@ts-ignore\nimport music from \"./sounds/music.mp3\"\nimport {Game} from \"./components/Game/Game\";\nimport useSound from \"use-sound\";\n\nexport type CardType = {\n    content: string;\n    type: \"open\" | \"closed\" | \"wrong\" | \"correct\";\n};\n\nconst Settings = React.lazy(()=> import(\"./components/Settings/Settings\"))\n\nfunction App() {\n    const dispatch = useDispatch()\n    const gameType = useSelector(getGameType)\n    const board = useSelector(boardSelector)\n    const cardPair = useSelector(cardPairSelector)\n    const musicVolume = useSelector(getMusicVolume)\n    const boardSize = useSelector(getBoardSize)\n\n    const [play, {stop}] = useSound(music, {volume: Number(localStorage.getItem(\"musicVolume\") || musicVolume) , interrupt: true})\n    useEffect(()=>{\n        gameType===\"wait\"?play():stop()\n    },[play,gameType]) // eslint-disable-line\n    useEffect(() => {\n        const localStorageBoard = ():string|null => localStorage.getItem(\"board\")\n        const localStorageCardPair = ():string|null => localStorage.getItem(\"cardPair\")\n        const localStorageGameType = ():string|null => localStorage.getItem(\"gameType\")\n        const localStorageMusicVolume = ():string|null => localStorage.getItem(\"musicVolume\")\n        const localStorageSoundsVolume= ():string|null => localStorage.getItem(\"soundsVolume\")\n        const localStorageBoardSize= ():string|null => localStorage.getItem(\"boardSize\")\n        const localStorageImageURL= ():string|null => localStorage.getItem(\"imgURL\")\n        const lB = localStorageBoard()\n        const lT = localStorageGameType()\n        const lC = localStorageCardPair()\n        const lMV = localStorageMusicVolume()\n        const lSV = localStorageSoundsVolume()\n        const lBS = localStorageBoardSize()\n        const lMU = localStorageImageURL()\n        lC && dispatch(setCardPairs(JSON.parse(lC)))\n        lT && dispatch(setGame(JSON.parse(lT)))\n        lMV && dispatch(setMusicVolume(JSON.parse(lMV)))\n        lSV && dispatch(setSoundsVolume(JSON.parse(lSV)))\n        lMU && dispatch(setCardStyle(lMU))\n        //@ts-ignore\n        lBS && dispatch(setBoardSize(lBS))\n        lB\n            ? dispatch(setBoard(JSON.parse(lB)))\n            : dispatch(setBoard([...boardItems, ...boardItems].sort(() => 0.5 - Math.random())))\n\n    }, []) // eslint-disable-line\n    useEffect(() => {\n        dispatch(answer([...cardPair]))\n    }, [board]) // eslint-disable-line\n    const boardItemsCount = boardSize === \"small\" ? 4 : boardSize === \"normal\" ? 8 : boardSize === \"big\" ? 10 : 18\n    const boardItems: Array<CardType> = Array(boardItemsCount).fill(0).map((e:number,index:number) => ( {content:`${index}`, type:\"closed\"}))\n\n    return (\n        <div className=\"App\">\n            <div className={\"game\"}>\n                <Switch>\n                    <Route  path={\"/settings\"} render={()=><Suspense fallback={<div>Loading</div>}><Settings /></Suspense>}/>\n                    <Route  path={\"/\"} render={()=><Game boardItems={boardItems}/>}/>\n                    <Route  path={\"*\"} render={()=><h1>404</h1>}/>\n                </Switch>\n\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport gameReducer from \"./game-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    game: gameReducer,\r\n});\r\ntype reducersType = typeof reducers;\r\nexport type AppStateType = ReturnType<reducersType>;\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nlet store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}