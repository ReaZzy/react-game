{"version":3,"sources":["components/Settings/Hotkeys.tsx","components/Settings/Difficulty.tsx","components/Settings/BoardSize.tsx","components/Settings/MusicSlider.tsx","components/Settings/Settings.tsx"],"names":["Hotkeys","React","memo","className","level","type","size","Text","keyboard","Difficulty","dispatch","useDispatch","difficulty","useSelector","getDifficulty","Group","defaultValue","value","buttonStyle","onChange","e","setDifficulty","target","Button","BoardSize","boardSize","getBoardSize","setBoardSize","MusicSlider","musicVolume","getMusicVolume","soundsVolume","getSoundsVolume","setMusicVolume","localStorage","setItem","setSoundsVolume","Setting","useState","error","setError","history","useHistory","autoPlay","getAutoPlay","style","display","marginTop","checked","setAutoPlay","backgroundColor","reader","FileReader","files","readAsDataURL","onerror","console","log","onloadend","base64data","result","setTimeout","setCardStyle","setImg","onClick","resetSettings","danger","goBack"],"mappings":"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","file":"static/js/6.b10a7a89.chunk.js","sourcesContent":["import Title from \"antd/lib/typography/Title\";\r\nimport {Button, Typography} from \"antd\";\r\nimport React from \"react\";\r\n\r\nexport const Hotkeys =React.memo(() => {\r\n    return(\r\n        <div className={\"hotkeys\"}>\r\n            <Title level={2}>Hotkeys</Title>\r\n            <div>\r\n                <Button type={\"dashed\"} size={\"large\"}>CTRL + Z</Button>\r\n                <Typography.Text keyboard>Back to homepage</Typography.Text>\r\n            </div>\r\n            <div>\r\n                <Button type={\"dashed\"} size={\"large\"}>CTRL + X</Button>\r\n                <Typography.Text keyboard>Settings</Typography.Text>\r\n            </div>\r\n            <div>\r\n                <Button type={\"dashed\"} size={\"large\"}>CTRL + C</Button>\r\n                <Typography.Text keyboard>Stats</Typography.Text>\r\n            </div>\r\n            <div>\r\n                <Button type={\"dashed\"} size={\"large\"}>CTRL + V</Button>\r\n                <Typography.Text keyboard>Refresh your board</Typography.Text>\r\n            </div>\r\n            <div>\r\n                <Button type={\"dashed\"} size={\"large\"}>CTRL + ENTER</Button>\r\n                <Typography.Text keyboard>Start game</Typography.Text>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})","import {Radio} from \"antd\";\r\nimport React from \"react\";\r\nimport {setDifficulty} from \"../../redux/game-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getDifficulty} from \"../../redux/selectors/selectors\";\r\n\r\nexport const Difficulty =React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const difficulty = useSelector(getDifficulty)\r\n    const onAfterChangeDifficulty = (e: any) => {\r\n        dispatch(setDifficulty(e.target.value))\r\n    }\r\n\r\n    return(\r\n        <div className={\"setting-button\"}>\r\n            <label className={\"label\"}> Difficulty </label>\r\n            <div>\r\n                <Radio.Group defaultValue={difficulty} value={difficulty}\r\n                             buttonStyle=\"solid\" onChange={onAfterChangeDifficulty}>\r\n                    <Radio.Button value=\"easy\">Easy</Radio.Button>\r\n                    <Radio.Button value=\"normal\">Normal</Radio.Button>\r\n                    <Radio.Button value=\"hard\">Hard</Radio.Button>\r\n                </Radio.Group>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {Radio} from \"antd\";\r\nimport React from \"react\";\r\nimport {setBoardSize} from \"../../redux/game-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getBoardSize} from \"../../redux/selectors/selectors\";\r\n\r\nexport const BoardSize =React.memo(() => {\r\n    const dispatch = useDispatch()\r\n    const boardSize = useSelector(getBoardSize)\r\n    const onAfterChangeBoardSize = (e: any) => {\r\n        dispatch(setBoardSize(e.target.value))\r\n    }\r\n\r\n    return(\r\n        <div className={\"setting-button\"}>\r\n            <label className={\"label\"}> Board size </label>\r\n            <div>\r\n                <Radio.Group defaultValue={boardSize} value={boardSize}\r\n                             buttonStyle=\"solid\" onChange={onAfterChangeBoardSize}>\r\n                    <Radio.Button value=\"small\">Small</Radio.Button>\r\n                    <Radio.Button value=\"normal\">Normal</Radio.Button>\r\n                    <Radio.Button value=\"big\">Big</Radio.Button>\r\n                    <Radio.Button value=\"huge\">Huge</Radio.Button>\r\n                </Radio.Group>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {Slider} from \"antd\";\r\nimport React from \"react\";\r\nimport {setMusicVolume, setSoundsVolume} from \"../../redux/game-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getMusicVolume, getSoundsVolume} from \"../../redux/selectors/selectors\";\r\n\r\nexport const MusicSlider:React.FC<{type:\"Sounds\"|\"Music\"}> = React.memo(({type}) => {\r\n    const musicVolume = useSelector(getMusicVolume)\r\n    const soundsVolume = useSelector(getSoundsVolume)\r\n    const dispatch = useDispatch()\r\n\r\n    const onAfterChangeMusic = (value: number) => {\r\n        dispatch(setMusicVolume(value / 100))\r\n        localStorage.setItem(\"musicVolume\", `${value / 100}`)\r\n    }\r\n    const onAfterChangeSounds = (value: number) => {\r\n        dispatch(setSoundsVolume(value / 100))\r\n        localStorage.setItem(\"soundsVolume\", `${value / 100}`)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <label className={\"label\"}> {type} </label>\r\n            <Slider className={\"slider\"} value={type === \"Music\" ? musicVolume * 100 : soundsVolume *100}\r\n                    defaultValue={type === \"Music\" ? musicVolume * 100 : soundsVolume *100}\r\n                    onChange={type === \"Music\" ? onAfterChangeMusic : onAfterChangeSounds}/>\r\n        </>\r\n    )\r\n})","import React, {useState} from \"react\";\r\nimport {Button, Switch} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    resetSettings, setAutoPlay,\r\n    setCardStyle,\r\n} from \"../../redux/game-reducer\";\r\nimport {\r\n    getAutoPlay,\r\n} from \"../../redux/selectors/selectors\";\r\nimport {ArrowLeftOutlined} from \"@ant-design/icons/lib\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport {Hotkeys} from \"./Hotkeys\";\r\nimport {Difficulty} from \"./Difficulty\";\r\nimport {BoardSize} from \"./BoardSize\";\r\nimport {MusicSlider} from \"./MusicSlider\";\r\n\r\nconst Setting: React.FC<{}> = React.memo(() => {\r\n    const [error, setError] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const autoPlay = useSelector(getAutoPlay)\r\n    const back = () => {\r\n        history.goBack()\r\n    }\r\n    const setImg = (base64data: any) => {\r\n        localStorage.setItem(\"imgURL\", base64data)\r\n        setError(false)\r\n        dispatch(setCardStyle(base64data))\r\n    }\r\n    const setErrorFunc = () => {\r\n        setError(true)\r\n        setTimeout(() => {\r\n            setError(false)\r\n        }, 2000)\r\n    }\r\n    const loadFile = (e: any) => {\r\n        const reader = new FileReader();\r\n        if (e.target.files[0]) {\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n        reader.onerror = function () {\r\n            console.log(\"error\")\r\n        }\r\n        reader.onloadend = function () { // https://stackoverflow.com/questions/18650168/convert-blob-to-base64\r\n            const base64data = reader.result;\r\n            e.target?.files[0].size >= 1000000\r\n                ? setErrorFunc()\r\n                : setImg(base64data)\r\n        }\r\n    }\r\n\r\n\r\n    const onChangeAutoPlay = (e: boolean) => {\r\n        dispatch(setAutoPlay(e))\r\n    }\r\n    return (\r\n        <div className={`menu settings`}>\r\n            <div className={\"menu-content\"}>\r\n                <span className={\"settings-buttons\"}>\r\n                    <Difficulty/>\r\n                    <BoardSize/>\r\n                </span>\r\n                <MusicSlider type={\"Music\"}/>\r\n                <MusicSlider type={\"Sounds\"}/>\r\n                <div style={{display: \"flex\"}}>\r\n                    <label className={\"label\"}> Autoplay </label>\r\n                    <Switch style={{marginTop: \"10px\"}} checked={autoPlay} onChange={onChangeAutoPlay}/>\r\n                </div>\r\n                <label style={{backgroundColor: error ? \"#FF0000\" : \"#1890ff\"}} className={\"label label-input reset\"}>\r\n                    {error ? \"Max image size is 1MB\" : \"Upload your card style\"}\r\n                    <input type=\"file\" className={\"file-input\"} onChange={loadFile}/>\r\n                </label>\r\n                <Hotkeys/>\r\n\r\n                <Button className={\"reset\"} onClick={() => {\r\n                    dispatch(resetSettings())\r\n                }} type=\"primary\" danger>\r\n                    Reset\r\n                </Button>\r\n                <Button className={\"reset\"} onClick={() => {\r\n                    back()\r\n                }} type=\"primary\">\r\n                    <ArrowLeftOutlined/>\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Setting"],"sourceRoot":""}