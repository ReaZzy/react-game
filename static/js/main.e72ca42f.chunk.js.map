{"version":3,"sources":["sounds/wrong-audio.wav","sounds/correct-audio.wav","sounds/open-sound.wav","sounds/win.wav","sounds/lose.wav","redux/game-reducer.ts","redux/selectors/selectors.ts","components/Card/Card.tsx","components/Timer/Timer.tsx","components/Game/Game.tsx","sounds/music.mp3","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["initialState","board","boardDisabled","cardPair","gameType","musicVolume","soundsVolume","boardSize","games","imgURL","difficulty","time","score","highScore","autoPlay","openCardAudio","Audio","openAudio","wrongAnswerAudio","wrongAudio","correctAnswerAudio","correctAudio","winGameAudio","winAudio","loseGameAudio","loseAudio","Date","toLocaleDateString","split","month","date","year","openCard","number","type","setBoard","setAnswers","data","disableBoard","boolean","setGame","setCardPair","card","setCardPairs","cards","setMusicVolume","volume","setSoundsVolume","setBoardSize","setCardStyle","setDifficulty","setTimer","setScore","setHighScore","setGames","game","setAutoPlay","answer","dispatch","getState","a","wrong","play","setTimeout","correct","localStorage","setItem","JSON","stringify","length","content","every","e","setGameToStats","map","backOptions","boardItems","removeItem","backToMainMenu","sort","Math","random","refreshBoard","winOrLose","key","startGame","resetSettings","lose","startAutoPlay","boardCopy","ind","reduce","res","el","index","push","answerShuffled","asd","flat","i","setLocalStorage","localStorageCardPair","getItem","localStorageGameType","localStorageMusicVolume","localStorageSoundsVolume","localStorageBoardSize","localStorageImageURL","localStorageDifficulty","localStorageTimer","localStorageScore","localStorageHighScore","localStorageGames","lB","localStorageBoard","lT","lC","lMV","lSV","lBS","lMU","lD","lTM","lS","lHS","lG","parse","gameReducer","state","action","condition","boardSelector","disabledBoardSelector","cardPairSelector","getGameType","getSoundsVolume","getMusicVolume","getBoardSize","getImgURL","getDifficulty","getTime","getScore","getHighScore","getGames","getAutoPlay","Card","React","memo","useDispatch","useSelector","className","onClick","src","alt","id","Timer","useEffect","timer","setInterval","clearInterval","size","danger","ClockCircleOutlined","Game","disabledBoard","to","Settings","lazy","Stats","App","history","useHistory","useState","isFullScreen","setIsFullScreen","useSound","music","Number","interrupt","stop","toSettings","path","startGameHotKey","hotkeys","keyup","event","handler","Array","fill","document","getElementById","docWithBrowsersExitFunctions","exitFullscreen","webkitExitFullscreen","msExitFullscreen","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","render","fallback","href","rel","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM"],"mappings":"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","file":"static/js/main.e72ca42f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/wrong-audio.70fff5c7.wav\";","export default __webpack_public_path__ + \"static/media/correct-audio.62721562.wav\";","export default __webpack_public_path__ + \"static/media/open-sound.15057a5c.wav\";","export default __webpack_public_path__ + \"static/media/win.aa3ddaa5.wav\";","export default __webpack_public_path__ + \"static/media/lose.02ef6b82.wav\";","import {CardType} from \"../App\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n// @ts-ignore\r\nimport wrongAudio from \"./../sounds/wrong-audio.wav\"\r\n// @ts-ignore\r\nimport correctAudio from \"./../sounds/correct-audio.wav\"\r\n// @ts-ignore\r\nimport openAudio from \"./../sounds/open-sound.wav\"\r\n// @ts-ignore\r\nimport winAudio from \"./../sounds/win.wav\"\r\n// @ts-ignore\r\nimport loseAudio from \"./../sounds/lose.wav\"\r\n\r\nexport type GameType = {\r\n    key: number\r\n    date: string,\r\n    winOrLose: \"win\" | \"lose\"\r\n    boardSize: string\r\n    difficulty: string,\r\n    score: number,\r\n    time: number\r\n}\r\n\r\nconst initialState = {\r\n    board: [] as Array<CardType>,\r\n    boardDisabled: false,\r\n    cardPair: [] as Array<CardType>,\r\n    gameType: \"wait\" as \"wait\" | \"playing\" | \"win\" | \"lose\",\r\n    musicVolume: 1,\r\n    soundsVolume: 1,\r\n    boardSize: \"normal\",\r\n    games: [] as Array<GameType>,\r\n    imgURL: null as string | null,\r\n    difficulty: \"normal\",\r\n    time: 0,\r\n    score: 0,\r\n    highScore: 0,\r\n    autoPlay: false\r\n};\r\ntype initialStateType = typeof initialState;\r\n\r\n\r\n// AUDIO\r\nconst openCardAudio = new Audio(openAudio)\r\nconst wrongAnswerAudio = new Audio(wrongAudio)\r\nconst correctAnswerAudio = new Audio(correctAudio)\r\nconst winGameAudio = new Audio(winAudio)\r\nconst loseGameAudio = new Audio(loseAudio)\r\nlet [month, date, year] = new Date().toLocaleDateString(\"en-US\").split(\"/\")\r\n\r\nconst gameReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_BOARD\": {\r\n            return {\r\n                ...state,\r\n                board: [...action.board]\r\n            }\r\n        }\r\n        case \"OPEN_CARD\": {\r\n            openCardAudio.play()\r\n            return {\r\n                ...state,\r\n                board: state.board.map((board, i) => {\r\n                    return i === action.number ? {...board, type: \"open\"} : board\r\n                })\r\n            }\r\n        }\r\n        case \"SET_ANSWERS\": {\r\n            const {cardPair, type} = action.data\r\n            const condition = (e: CardType, type: \"wrong\" | \"correct\" | \"open\" | \"closed\") => {\r\n                return e.content === cardPair[0].content || e.content === cardPair[1].content\r\n                    ? {...e, type: type}\r\n                    : e\r\n            }\r\n            return {\r\n                ...state,\r\n                board: state.board.map((e: CardType) =>\r\n                    e.type === \"open\"\r\n                        ? condition(e, type)\r\n                        : e.type === \"wrong\" ? condition(e, type) : e\r\n                )\r\n            }\r\n        }\r\n        case \"SET_GAME_TYPE\": {\r\n            localStorage.setItem(\"gameType\", JSON.stringify(action.gameType))\r\n            return {...state, gameType: action.gameType}\r\n        }\r\n        case \"SET_BOARD_SIZE\": {\r\n            localStorage.setItem(\"boardSize\", `${action.boardSize}`)\r\n            return {...state, boardSize: action.boardSize}\r\n        }\r\n        case \"DISABLE_BOARD\": {\r\n            return {...state, boardDisabled: action.boolean}\r\n        }\r\n        case \"SET_SOUNDS_VOLUME\": {\r\n            return {...state, soundsVolume: action.volume}\r\n        }\r\n        case \"SET_MUSIC_VOLUME\": {\r\n            return {...state, musicVolume: action.volume}\r\n        }\r\n        case \"SET_CARD_PAIR\": {\r\n            return {...state, cardPair: [...state.cardPair, action.card]}\r\n        }\r\n        case \"SET_CARD_STYLE\": {\r\n            return {...state, imgURL: action.imgURL}\r\n        }\r\n        case \"SET_CARD_PAIRS\": {\r\n            return {...state, cardPair: [...action.cards]}\r\n        }\r\n        case \"SET_DIFFICULTY\": {\r\n            localStorage.setItem(\"difficulty\", `${action.difficulty}`)\r\n            return {...state, difficulty: action.difficulty}\r\n        }\r\n        case \"SET_TIMER\": {\r\n            return {...state, time: action.time}\r\n        }\r\n        case \"SET_SCORE\": {\r\n            return {...state, score: action.score}\r\n        }\r\n        case \"SET_HIGH_SCORE\": {\r\n            return {...state, highScore: action.score}\r\n        }\r\n        case \"SET_GAMES\": {\r\n            return {...state, games: [action.game, ...state.games]}\r\n        }\r\n        case \"SET_ALL_GAMES\": {\r\n            return {...state, games: action.games}\r\n        }\r\n        case \"SET_AUTO_PLAY\": {\r\n            return {...state, autoPlay: action.autoPlay}\r\n        }\r\n        case \"CLEAR_CARD_PAIR\": {\r\n            return {...state, cardPair: []}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ActionsType =\r\n    openCardType\r\n    | setBoardType\r\n    | setAnswersType\r\n    | disableBoardType\r\n    | clearCardPairType\r\n    | setCardPairType\r\n    | setGameType\r\n    | setCardPairsType\r\n    | setSoundsVolumeType\r\n    | setMusicVolumeType\r\n    | setBoardSizeType\r\n    | setCardStyleType\r\n    | setDifficultyType\r\n    | setScoreType\r\n    | setTimerType\r\n    | setHighScoreType\r\n    | setGamesType\r\n    | setAllGamesType\r\n    | setAutoPlayType\r\n\r\n\r\nexport const openCard = (number: number): openCardType => ({\r\n    type: \"OPEN_CARD\",\r\n    number,\r\n});\r\ntype openCardType = {\r\n    type: \"OPEN_CARD\";\r\n    number: number;\r\n};\r\n\r\nexport const setBoard = (board: Array<CardType>): setBoardType => ({\r\n    type: \"SET_BOARD\",\r\n    board,\r\n});\r\ntype setBoardType = {\r\n    type: \"SET_BOARD\";\r\n    board: Array<CardType>;\r\n};\r\n\r\nexport const setAnswers = (cardPair: Array<CardType>, type: \"wrong\" | \"correct\" | \"closed\" | \"open\"): setAnswersType => ({\r\n    type: \"SET_ANSWERS\",\r\n    data: {\r\n        cardPair, type\r\n    }\r\n})\r\ntype setAnswersType = {\r\n    type: \"SET_ANSWERS\";\r\n    data: {\r\n        cardPair: Array<CardType>,\r\n        type: \"wrong\" | \"correct\" | \"closed\" | \"open\"\r\n    }\r\n}\r\n\r\nexport const disableBoard = (boolean: boolean): disableBoardType => ({type: \"DISABLE_BOARD\", boolean})\r\ntype disableBoardType = { type: \"DISABLE_BOARD\", boolean: boolean }\r\nexport const setGame = (gameType: \"wait\" | \"playing\" | \"win\" | \"lose\"): setGameType => ({\r\n    type: \"SET_GAME_TYPE\",\r\n    gameType\r\n})\r\ntype setGameType = { type: \"SET_GAME_TYPE\", gameType: \"wait\" | \"playing\" | \"win\" | \"lose\" }\r\nexport const setCardPair = (card: CardType): setCardPairType => ({type: \"SET_CARD_PAIR\", card})\r\ntype setCardPairType = { type: \"SET_CARD_PAIR\", card: CardType }\r\nexport const setCardPairs = (cards: Array<CardType>): setCardPairsType => ({type: \"SET_CARD_PAIRS\", cards})\r\ntype setCardPairsType = { type: \"SET_CARD_PAIRS\", cards: Array<CardType> }\r\nconst clearCardPair = (): clearCardPairType => ({type: \"CLEAR_CARD_PAIR\"})\r\ntype clearCardPairType = { type: \"CLEAR_CARD_PAIR\" }\r\nexport const setMusicVolume = (volume: number): setMusicVolumeType => ({type: \"SET_MUSIC_VOLUME\", volume})\r\ntype setMusicVolumeType = { type: \"SET_MUSIC_VOLUME\", volume: number }\r\nexport const setSoundsVolume = (volume: number): setSoundsVolumeType => ({type: \"SET_SOUNDS_VOLUME\", volume})\r\ntype setSoundsVolumeType = { type: \"SET_SOUNDS_VOLUME\", volume: number }\r\nexport const setBoardSize = (boardSize: string): setBoardSizeType => ({type: \"SET_BOARD_SIZE\", boardSize})\r\ntype setBoardSizeType = { type: \"SET_BOARD_SIZE\", boardSize: string }\r\nexport const setCardStyle = (imgURL: string): setCardStyleType => ({type: \"SET_CARD_STYLE\", imgURL})\r\ntype setCardStyleType = { type: \"SET_CARD_STYLE\", imgURL: string }\r\nexport const setDifficulty = (difficulty: string): setDifficultyType => ({type: \"SET_DIFFICULTY\", difficulty})\r\ntype setDifficultyType = { type: \"SET_DIFFICULTY\", difficulty: string }\r\nexport const setTimer = (time: number): setTimerType => ({type: \"SET_TIMER\", time})\r\ntype setTimerType = { type: \"SET_TIMER\", time: number }\r\nexport const setScore = (score: number): setScoreType => ({type: \"SET_SCORE\", score})\r\ntype setScoreType = { type: \"SET_SCORE\", score: number }\r\nexport const setHighScore = (score: number): setHighScoreType => ({type: \"SET_HIGH_SCORE\", score})\r\ntype setHighScoreType = { type: \"SET_HIGH_SCORE\", score: number }\r\nexport const setGames = (game: GameType): setGamesType => ({type: \"SET_GAMES\", game})\r\ntype setGamesType = { type: \"SET_GAMES\", game: GameType }\r\nexport const setAllGames = (games: Array<GameType>): setAllGamesType => ({type: \"SET_ALL_GAMES\", games})\r\ntype setAllGamesType = { type: \"SET_ALL_GAMES\", games: Array<GameType> }\r\nexport const setAutoPlay = (autoPlay: boolean): setAutoPlayType => ({type: \"SET_AUTO_PLAY\", autoPlay})\r\ntype setAutoPlayType = { type: \"SET_AUTO_PLAY\", autoPlay: boolean }\r\n\r\n\r\nexport const answer = (cardPair: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n\r\n    const {game} = getState()\r\n\r\n    openCardAudio.volume = game.soundsVolume\r\n    wrongAnswerAudio.volume = game.soundsVolume\r\n    correctAnswerAudio.volume = game.soundsVolume\r\n    winGameAudio.volume = game.soundsVolume\r\n    loseGameAudio.volume = game.soundsVolume\r\n\r\n    const wrong = () => {\r\n        wrongAnswerAudio.play()\r\n        dispatch(disableBoard(true))\r\n        dispatch(setAnswers(cardPair, \"wrong\"))\r\n        setTimeout(() => {\r\n            dispatch(setAnswers(cardPair, \"closed\"))\r\n            dispatch(disableBoard(false))\r\n        }, 1000)\r\n    }\r\n    const correct = async () => {\r\n        await correctAnswerAudio.play()\r\n        dispatch(setAnswers(cardPair, \"correct\"))\r\n        dispatch(setScore(game.score + 2))\r\n        if (game.score >= game.highScore) {\r\n            dispatch(setHighScore(game.score + 2))\r\n            localStorage.setItem(\"highScore\", JSON.stringify(game.score + 2))\r\n        }\r\n    }\r\n\r\n    if (cardPair.length === 2) {\r\n        cardPair[0].content === cardPair[1].content\r\n            ? correct()\r\n            : wrong()\r\n        dispatch(clearCardPair())\r\n    }\r\n\r\n    if (game.board.every((e: CardType) => e.type === \"correct\")) {\r\n        dispatch(setGame(\"win\"))\r\n        await dispatch(setGameToStats(\"win\"))\r\n        await winGameAudio.play()\r\n    }\r\n\r\n    localStorage.setItem(\"board\", JSON.stringify(game.board.map((e: CardType) => e.type === \"wrong\" ? {\r\n        content: e.content,\r\n        type: \"closed\"\r\n    } : e)))\r\n    localStorage.setItem(\"cardPair\", JSON.stringify(cardPair))\r\n    localStorage.setItem(\"score\", JSON.stringify(game.score))\r\n}\r\n\r\n\r\nconst backOptions = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n    const {game} = getState()\r\n    dispatch(setCardPairs([]))\r\n    dispatch(setScore(0))\r\n    dispatch(setTimer(game.difficulty === \"easy\" ? 60 : game.difficulty === \"normal\" ? 50 : 30))\r\n    localStorage.removeItem(\"cardPair\")\r\n}\r\nexport const backToMainMenu = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n    dispatch(setBoard([...boardItems, ...boardItems].sort(() => 0.5 - Math.random())))\r\n    dispatch(backOptions(boardItems))\r\n    dispatch(setGame(\"wait\"))\r\n    localStorage.removeItem(\"board\")\r\n}\r\nexport const refreshBoard = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n    dispatch(setBoard([...boardItems, ...boardItems].sort(() => 0.5 - Math.random())))\r\n    openCardAudio.play()\r\n    dispatch(backOptions(boardItems))\r\n}\r\nconst setGameToStats = (winOrLose: \"win\" | \"lose\"): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n    const {game} = getState()\r\n    dispatch(setGames({\r\n        key: Math.random(),\r\n        date: `${month}/${date}/${year}`,\r\n        boardSize: game.boardSize,\r\n        difficulty: game.difficulty,\r\n        score: game.score,\r\n        winOrLose: winOrLose,\r\n        time: (game.difficulty === \"easy\" ? 60 : game.difficulty === \"normal\" ? 50 : 30) - game.time\r\n    }))\r\n    localStorage.setItem(\"games\", JSON.stringify([{\r\n        key: Math.random(),\r\n        date: `${month}/${date}/${year}`,\r\n        boardSize: game.boardSize,\r\n        difficulty: game.difficulty,\r\n        score: game.score,\r\n        winOrLose: winOrLose,\r\n        time: (game.difficulty === \"easy\" ? 60 : game.difficulty === \"normal\" ? 50 : 30) - game.time\r\n    }, ...game.games]))\r\n}\r\n\r\nexport const startGame = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    dispatch(setGame(\"playing\"))\r\n    dispatch(setBoard([...boardItems, ...boardItems].sort(() => 0.5 - Math.random())))\r\n    dispatch(backOptions(boardItems))\r\n}\r\nexport const resetSettings = (): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    dispatch(setCardStyle(\"\"))\r\n    dispatch(setDifficulty(\"normal\"))\r\n    dispatch(setBoardSize(\"normal\"))\r\n    dispatch(setMusicVolume(1))\r\n    dispatch(setSoundsVolume(1))\r\n    localStorage.removeItem(\"imgURL\")\r\n    localStorage.removeItem(\"musicVolume\")\r\n    localStorage.removeItem(\"soundsVolume\")\r\n}\r\nexport const lose = (): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    dispatch(setGame(\"lose\"))\r\n    await dispatch(setGameToStats(\"lose\"))\r\n    await loseGameAudio.play()\r\n}\r\n\r\n\r\nexport const startAutoPlay = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n    const {game} = getState()\r\n    if(game.autoPlay){\r\n        dispatch(setGame(\"playing\"))\r\n        const boardCopy = [...game.board]\r\n        const answer = boardCopy.map((e, ind) => {\r\n            return [...boardCopy.reduce(\r\n                (res: any, el, index) =>\r\n                    (\r\n                        el.content === `${ind}` ? res.push(index) && res : res\r\n                    )\r\n                , []\r\n            )]\r\n        })\r\n        const answerShuffled = [...answer].sort(() => 0.5 - Math.random())\r\n        let asd = 0\r\n        for (let i of answerShuffled.flat()) {\r\n            asd++\r\n            setTimeout(() => {\r\n                if (game.board[i].type === \"closed\") {\r\n                    dispatch(setCardPair(game.board[i]))\r\n                    dispatch(openCard(i))\r\n                }\r\n\r\n            }, asd * 600)\r\n        }\r\n        dispatch(backOptions(boardItems))\r\n    }\r\n}\r\n\r\nexport const setLocalStorage = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    const localStorageBoard = (): string | null => localStorage.getItem(\"board\")\r\n    const localStorageCardPair = (): string | null => localStorage.getItem(\"cardPair\")\r\n    const localStorageGameType = (): string | null => localStorage.getItem(\"gameType\")\r\n    const localStorageMusicVolume = (): string | null => localStorage.getItem(\"musicVolume\")\r\n    const localStorageSoundsVolume = (): string | null => localStorage.getItem(\"soundsVolume\")\r\n    const localStorageBoardSize = (): string | null => localStorage.getItem(\"boardSize\")\r\n    const localStorageImageURL = (): string | null => localStorage.getItem(\"imgURL\")\r\n    const localStorageDifficulty = (): string | null => localStorage.getItem(\"difficulty\")\r\n    const localStorageTimer = (): string | null => localStorage.getItem(\"timer\")\r\n    const localStorageScore = (): string | null => localStorage.getItem(\"score\")\r\n    const localStorageHighScore = (): string | null => localStorage.getItem(\"highScore\")\r\n    const localStorageGames = (): string | null => localStorage.getItem(\"games\")\r\n    const lB = localStorageBoard()\r\n    const lT = localStorageGameType()\r\n    const lC = localStorageCardPair()\r\n    const lMV = localStorageMusicVolume()\r\n    const lSV = localStorageSoundsVolume()\r\n    const lBS = localStorageBoardSize()\r\n    const lMU = localStorageImageURL()\r\n    const lD = localStorageDifficulty()\r\n    const lTM = localStorageTimer()\r\n    const lS = localStorageScore()\r\n    const lHS = localStorageHighScore()\r\n    const lG = localStorageGames()\r\n    lC && dispatch(setCardPairs(JSON.parse(lC)))\r\n    lT && dispatch(setGame(JSON.parse(lT)))\r\n    lMV && dispatch(setMusicVolume(JSON.parse(lMV)))\r\n    lSV && dispatch(setSoundsVolume(JSON.parse(lSV)))\r\n    lMU && dispatch(setCardStyle(lMU))\r\n    lD && dispatch(setDifficulty(lD))\r\n    lBS && dispatch(setBoardSize(lBS))\r\n    lTM && dispatch(setTimer(+lTM))\r\n    lS && dispatch(setScore(+lS))\r\n    lHS && dispatch(setHighScore(+lHS))\r\n    lG && dispatch(setAllGames(JSON.parse(lG)))\r\n    lB\r\n        ? dispatch(setBoard(JSON.parse(lB)))\r\n        : dispatch(setBoard([...boardItems, ...boardItems].sort(() => 0.5 - Math.random())))\r\n}\r\n\r\nexport default gameReducer","import {AppStateType} from \"../store\";\r\n\r\nexport const boardSelector = (state:AppStateType)=> {\r\n    return state?.game?.board\r\n}\r\n\r\nexport const disabledBoardSelector = (state:AppStateType) => {\r\n    return state?.game?.boardDisabled\r\n}\r\nexport const cardPairSelector = (state:AppStateType) => {\r\n    return state?.game?.cardPair\r\n}\r\nexport const getGameType = (state:AppStateType) => {\r\n    return state?.game?.gameType\r\n}\r\nexport const getSoundsVolume = (state:AppStateType) => {\r\n    return state?.game?.soundsVolume\r\n}\r\nexport const getMusicVolume = (state:AppStateType) => {\r\n    return state?.game?.musicVolume\r\n}\r\nexport const getBoardSize = (state:AppStateType) => {\r\n    return state?.game?.boardSize\r\n}\r\nexport const getImgURL = (state:AppStateType) => {\r\n    return state?.game?.imgURL\r\n}\r\nexport const getDifficulty = (state:AppStateType) => {\r\n    return state?.game?.difficulty\r\n}\r\nexport const getTime = (state:AppStateType) => {\r\n    return state?.game?.time\r\n}\r\nexport const getScore = (state:AppStateType) => {\r\n    return state?.game?.score\r\n}\r\nexport const getHighScore = (state:AppStateType) => {\r\n    return state?.game?.highScore\r\n}\r\nexport const getGames = (state:AppStateType) => {\r\n    return state?.game?.games\r\n}\r\nexport const getAutoPlay = (state:AppStateType) => {\r\n    return state?.game?.autoPlay\r\n}\r\n","import React from \"react\";\r\nimport {CardType} from \"../../App\";\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {openCard, setCardPair} from \"../../redux/game-reducer\";\r\nimport {getImgURL} from \"../../redux/selectors/selectors\";\r\n\r\ntype CardComponentType = {\r\n    card: CardType;\r\n    index: number;\r\n    cardPair: Array<CardType>\r\n};\r\n\r\n\r\n\r\nexport const Card: React.FC<CardComponentType> = React.memo((\r\n    {card, index}\r\n    ) => {\r\n    const dispatch = useDispatch()\r\n    const imgURL = useSelector(getImgURL)\r\n\r\n    const handleClick = (i: number) => {\r\n        if(card.type === \"closed\"){\r\n            dispatch(openCard(i))\r\n            dispatch(setCardPair(card))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`noselect card ${card.type}`}\r\n               onClick={() => handleClick(index)}>\r\n            <div className={\"content\"}>\r\n                <div className={\"front\"}> {card.type !== \"closed\" && `${card.content}`} </div>\r\n                <div className={\"back noselect\"}> {imgURL && <img src={`${imgURL}`} alt={\"card\"} id={\"output\"}/>} </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n})\r\n","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getTime} from \"../../redux/selectors/selectors\";\r\nimport {lose, setTimer} from \"../../redux/game-reducer\";\r\nimport {Button} from \"antd\";\r\nimport { ClockCircleOutlined } from \"@ant-design/icons\";\r\n\r\nexport const Timer:React.FC<{}> = React.memo(() => {\r\n    const time = useSelector(getTime)\r\n    const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        const timer = setInterval(()=>{\r\n            if (time > 0){\r\n                localStorage.setItem(\"timer\", `${time-1}`)\r\n                dispatch(setTimer(time-1))\r\n            }\r\n            else{\r\n                dispatch(lose())\r\n            }\r\n        }, 1000)\r\n        return ()=>{\r\n            clearInterval(timer)\r\n        }\r\n    }, [time]) //eslint-disable-line\r\n\r\n    return(\r\n        <Button size={\"large\"} className={\"timer\"} danger = {time < 10}>\r\n            <ClockCircleOutlined /> {time}\r\n        </Button>\r\n    )\r\n})","import React from \"react\";\r\nimport {Card} from \"../Card/Card\";\r\nimport {Button} from \"antd\";\r\nimport {backToMainMenu, refreshBoard, startAutoPlay, startGame} from \"../../redux/game-reducer\";\r\nimport {CardType} from \"../../App\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    boardSelector,\r\n    cardPairSelector,\r\n    disabledBoardSelector, getAutoPlay,\r\n    getBoardSize,\r\n    getGameType, getHighScore, getScore\r\n} from \"../../redux/selectors/selectors\";\r\nimport {\r\n    ArrowLeftOutlined,\r\n    BarChartOutlined,\r\n    CaretRightOutlined,\r\n    ReloadOutlined,\r\n    SettingOutlined\r\n} from \"@ant-design/icons/lib\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Timer} from \"../Timer/Timer\";\r\n\r\nexport const Game: React.FC<{ boardItems: Array<CardType> }> = React.memo(({boardItems}) => {\r\n\r\n    const disabledBoard = useSelector(disabledBoardSelector)\r\n    const dispatch = useDispatch()\r\n    const gameType = useSelector(getGameType)\r\n    const board = useSelector(boardSelector)\r\n    const cardPair = useSelector(cardPairSelector)\r\n    const boardSize = useSelector(getBoardSize)\r\n    const score = useSelector(getScore)\r\n    const autoPlay = useSelector(getAutoPlay)\r\n    const highScore = useSelector(getHighScore)\r\n\r\n    const refreshAutoPlay = () => {\r\n        dispatch(backToMainMenu(boardItems))\r\n        dispatch(startAutoPlay(boardItems))\r\n    }\r\n    return (\r\n        <div>\r\n            {gameType === \"playing\"\r\n                ? <div className=\"appContent\">\r\n                    <div className=\"score\">\r\n                        <Button size={\"large\"}>Current score: {score}</Button>\r\n                        <Button size={\"large\"}>High score: {highScore}</Button>\r\n                        <Timer/>\r\n                    </div>\r\n                    <div className={`board ${boardSize} ${disabledBoard && \"disabled\"} ${autoPlay && \"autoPlay\"}`}>\r\n                        {board?.map((card: CardType, index: number) => {\r\n                            return (\r\n                                <Card cardPair={cardPair}\r\n                                      index={index}\r\n                                      card={card}\r\n                                      key={index}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    {!autoPlay && <> <Button onClick={() => {\r\n                        dispatch(refreshBoard(boardItems))\r\n                    }} className={\"reset-button\"} type=\"primary\" size={\"large\"}>\r\n                        <ReloadOutlined/>\r\n                    </Button>\r\n                        <Button onClick={() => {\r\n                            dispatch(backToMainMenu(boardItems))\r\n                        }} className={\"reset-button\"} type=\"primary\" size={\"large\"}>\r\n                            <ArrowLeftOutlined/>\r\n                        </Button>\r\n                    </>\r\n                    }\r\n                </div>\r\n\r\n                : <div className={`menu ${gameType} ${boardSize}`}>\r\n                    <div className={\"menu-content\"}>\r\n                        <div className={\"text\"}>\r\n                            <div className={\"end-text\"}>\r\n                                {gameType === \"win\"\r\n                                    ? \"You won !\"\r\n                                    : gameType === \"lose\"\r\n                                        ? \"You lose :(\"\r\n                                        : gameType === \"wait\"\r\n                                        && \"Memory game\"\r\n                                }\r\n                            </div>\r\n                            <div>\r\n                                <div className={\"small-text\"}>\r\n                                    High score: {highScore}\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div>\r\n                            <Button type=\"primary\" size={\"large\"} onClick={() => {\r\n                                autoPlay\r\n                                    ? refreshAutoPlay()\r\n                                    : dispatch(startGame(boardItems))\r\n                            }}>\r\n                                {gameType !== \"wait\" ? \"Play again\" : \"Play\"} <CaretRightOutlined/>\r\n                            </Button>\r\n                            <Button type=\"primary\" size={\"large\"} onClick={() => {\r\n                                dispatch(backToMainMenu(boardItems))\r\n                            }}>\r\n                                <Link to={\"/settings\"}><SettingOutlined/></Link>\r\n                            </Button>\r\n                            <Button type=\"primary\" size={\"large\"} onClick={() => {\r\n                                dispatch(backToMainMenu(boardItems))\r\n                            }}>\r\n                                <Link to={\"/stats\"}><BarChartOutlined/></Link>\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n})","export default __webpack_public_path__ + \"static/media/music.601c07ae.mp3\";","import React, {Suspense, useEffect, useState} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    answer, backToMainMenu, refreshBoard,\n    setLocalStorage, startAutoPlay, startGame,\n} from \"./redux/game-reducer\";\nimport {\n    boardSelector,\n    cardPairSelector, getAutoPlay,\n    getBoardSize,\n    getGameType,\n    getMusicVolume\n} from \"./redux/selectors/selectors\";\nimport {Route, Switch, useHistory} from \"react-router-dom\"\nimport {Game} from \"./components/Game/Game\";\nimport useSound from \"use-sound\";\nimport {FullscreenExitOutlined, FullscreenOutlined, GithubOutlined} from \"@ant-design/icons/lib\";\n//@ts-ignore\nimport music from \"./sounds/music.mp3\"\nimport hotkeys from \"hotkeys-js\";\nimport { Button } from \"antd\";\n\n\nexport type CardType = {\n    content: string;\n    type: \"open\" | \"closed\" | \"wrong\" | \"correct\";\n    id: number\n};\n\nconst Settings = React.lazy(()=> import(\"./components/Settings/Settings\"))\nconst Stats = React.lazy(()=> import(\"./components/Stats/Stats\"))\n\nconst App:React.FC<{}> = React.memo(() => {\n    const dispatch = useDispatch()\n    const gameType = useSelector(getGameType)\n    const board = useSelector(boardSelector)\n    const cardPair = useSelector(cardPairSelector)\n    const musicVolume = useSelector(getMusicVolume)\n    const boardSize = useSelector(getBoardSize)\n    const history = useHistory()\n    const autoPlay = useSelector(getAutoPlay)\n    const [isFullScreen, setIsFullScreen] = useState(false)\n    const [play, {stop}] = useSound(music, {volume: Number(localStorage.getItem(\"musicVolume\") || musicVolume) , interrupt: true})\n    useEffect(()=>{\n        gameType===\"wait\"?play():stop()\n    },[play,gameType]) // eslint-disable-line\n    useEffect(() => {\n       dispatch(setLocalStorage(boardItems))\n    }, []) // eslint-disable-line\n    useEffect(() => {\n        dispatch(answer([...cardPair]))\n    }, [board, cardPair]) // eslint-disable-line\n    useEffect(()=>{\n        const refreshAutoPlay = () => {\n            dispatch(backToMainMenu(boardItems))\n            dispatch(startAutoPlay(boardItems))\n        }\n        const toSettings = (path:string) => {\n            dispatch(backToMainMenu(boardItems))\n            history.push(path)\n        }\n        const startGameHotKey = () => {\n            autoPlay ? refreshAutoPlay() : dispatch(startGame(boardItems))\n            history.push(\"/\")\n        }\n        hotkeys('ctrl+x,ctrl+z,ctrl+c,ctrl+enter,ctrl+v',{keyup: true},function (event, handler){\n            switch (handler.key) {\n                case 'ctrl+x': event.type === 'keyup' &&  toSettings(\"settings\")\n                    break;\n                case 'ctrl+z': event.type === 'keyup' && toSettings(\"\")\n                    break;\n                case 'ctrl+c': event.type === 'keyup' && toSettings(\"stats\")\n                    break;\n                case 'ctrl+enter': event.type === 'keyup' && startGameHotKey()\n                    break;\n                case 'ctrl+v': event.type === 'keyup' && !autoPlay && dispatch(refreshBoard(boardItems))\n                    break;\n                default: break;\n            }\n        })\n    },[boardSize, autoPlay]) //eslint-disable-line\n\n\n    const boardItemsCount = boardSize === \"small\" ? 4 : boardSize === \"normal\" ? 8 : boardSize === \"big\" ? 10 : 18\n    const boardItems: Array<CardType> = Array(boardItemsCount).fill(0).map((e:number,index:number) => ({content:`${index}`, type:\"closed\", id:index}))\n    const game = document.getElementById(\"game\")\n    const handleClick = () => {\n        if(game){\n            if (game.requestFullscreen) {game.requestFullscreen()\n                setIsFullScreen(true)}\n            //@ts-ignore\n            else if (game.webkitRequestFullscreen) {game.webkitRequestFullscreen()\n                setIsFullScreen(true)}\n            //@ts-ignore\n            else if (game.msRequestFullscreen) {game.msRequestFullscreen()\n                setIsFullScreen(true)}\n        }\n    } // https://www.w3schools.com/howto/howto_js_fullscreen.asp\n    const handleOff = () => {\n        const docWithBrowsersExitFunctions = document as Document & {\n            mozCancelFullScreen(): Promise<void>;\n            webkitExitFullscreen(): Promise<void>;\n            msExitFullscreen(): Promise<void>;\n        };\n        if (docWithBrowsersExitFunctions.exitFullscreen) {\n            setIsFullScreen(false)\n            docWithBrowsersExitFunctions.exitFullscreen();\n        } else if (docWithBrowsersExitFunctions.webkitExitFullscreen) {\n            setIsFullScreen(false)\n            docWithBrowsersExitFunctions.webkitExitFullscreen();\n        } else if (docWithBrowsersExitFunctions.msExitFullscreen) {\n            setIsFullScreen(false)\n            docWithBrowsersExitFunctions.msExitFullscreen();\n        }\n    } // https://www.w3schools.com/howto/howto_js_fullscreen.asp\n\n    return (\n        <div className=\"App\">\n\n            <div className={\"game\"} id={\"game\"}>\n                <div className={\"fullScreen\"}>\n                    {isFullScreen\n                        ? <Button size={\"large\"} onClick={handleOff}><FullscreenExitOutlined /></Button>\n                        : <Button size={\"large\"}  onClick={handleClick}><FullscreenOutlined /></Button>\n                    }\n                </div>\n                <Switch>\n                    <Route  path={\"/settings\"} render={()=><Suspense fallback={<div>Loading</div>}><Settings /></Suspense>}/>\n                    <Route  path={\"/stats\"} render={()=><Suspense fallback={<div>Loading</div>}><Stats /></Suspense>}/>\n                    <Route  path={\"/\"} render={()=><Game boardItems={boardItems}/>}/>\n                    <Route  path={\"*\"} render={()=><h1>404</h1>}/>\n                </Switch>\n            </div>\n            <footer>\n                <a href={\"https://rs.school/react/\"} rel={\"noreferrer\"} target={\"_blank\"}>\n                    <img src={\"https://rs.school/images/rs_school_js.svg\"}  alt={\"course-logo\"}/>\n                </a>\n                <b>2021</b>\n                <a href={\"https://github.com/ReaZzy\"} rel={\"noreferrer\"} target={\"_blank\"}><GithubOutlined className={\"githubSvg\"}/></a>\n            </footer>\n        </div>\n    );\n})\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport gameReducer from \"./game-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    game: gameReducer,\r\n});\r\ntype reducersType = typeof reducers;\r\nexport type AppStateType = ReturnType<reducersType>;\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nlet store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport 'antd/dist/antd.css';\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}