{"version":3,"sources":["components/Settings/Settings.tsx"],"names":["Setting","dispatch","useDispatch","musicVolume","useSelector","getMusicVolume","soundsVolume","getSoundsVolume","boardSize","getBoardSize","history","useHistory","difficulty","getDifficulty","className","Group","defaultValue","buttonStyle","onChange","e","setDifficulty","target","value","localStorage","setItem","Button","setBoardSize","setMusicVolume","setSoundsVolume","type","reader","FileReader","readAsDataURL","files","onloadend","base64data","result","setCardStyle","onClick","resetSettings","danger","goBack"],"mappings":"mHAAA,4FAyFeA,UA1Ee,WAC1B,IAAMC,EAAWC,cACXC,EAAcC,YAAYC,KAC1BC,EAAeF,YAAYG,KAC3BC,EAAYJ,YAAYK,KACxBC,EAAUC,cACVC,EAAaR,YAAYS,KAiC/B,OACI,qBAAKC,UAAS,gBAAd,SACI,sBAAKA,UAAW,eAAhB,UACI,uBAAOA,UAAW,QAAlB,0BACA,eAAC,IAAMC,MAAP,CAAaC,aAAcJ,EAAYK,YAAY,QAAQC,SARvC,SAACC,GAC7BlB,EAASmB,YAAcD,EAAEE,OAAOC,QAChCC,aAAaC,QAAQ,aAArB,UAAsCL,EAAEE,OAAOC,SAMvC,UACI,cAAC,IAAMG,OAAP,CAAcH,MAAM,OAApB,kBACA,cAAC,IAAMG,OAAP,CAAcH,MAAM,SAApB,oBACA,cAAC,IAAMG,OAAP,CAAcH,MAAM,OAApB,qBAEJ,uBAAOR,UAAW,QAAlB,0BACA,eAAC,IAAMC,MAAP,CAAaC,aAAcR,EAAWS,YAAY,QAAQC,SAlBvC,SAACC,GAC5BlB,EAASyB,YAAaP,EAAEE,OAAOC,QAC/BC,aAAaC,QAAQ,YAArB,UAAqCL,EAAEE,OAAOC,SAgBtC,UACI,cAAC,IAAMG,OAAP,CAAcH,MAAM,QAApB,mBACA,cAAC,IAAMG,OAAP,CAAcH,MAAM,SAApB,oBACA,cAAC,IAAMG,OAAP,CAAcH,MAAM,MAApB,iBACA,cAAC,IAAMG,OAAP,CAAcH,MAAM,OAApB,qBAEJ,uBAAOR,UAAW,QAAlB,qBACA,cAAC,IAAD,CAAQA,UAAW,SAAUE,aAA0B,IAAZb,EAAiBe,SAjC7C,SAACI,GACxBrB,EAAS0B,YAAeL,EAAM,MAC9BC,aAAaC,QAAQ,cAArB,UAAuCF,EAAM,SAgCrC,uBAAOR,UAAW,QAAlB,sBACA,cAAC,IAAD,CAAQA,UAAW,SAAUE,aAA2B,IAAbV,EAAkBY,SA/B7C,SAACI,GACzBrB,EAAS2B,YAAgBN,EAAM,MAC/BC,aAAaC,QAAQ,eAArB,UAAwCF,EAAM,SA8BtC,wBAAOR,UAAW,0BAAlB,wCACA,uBAAOe,KAAK,OAAOf,UAAW,aAAeI,SAlDxC,SAACC,GAAY,IAAD,EACnBW,EAAS,IAAIC,WACnBD,EAAOE,cAAP,UAAqBb,EAAEE,cAAvB,aAAqB,EAAUY,MAAM,IACrCH,EAAOI,UAAY,WACf,IAAMC,EAAaL,EAAOM,OAE1BnC,EAASoC,YAAaF,IAEtBZ,aAAaC,QAAQ,SAAUW,UA6C3B,cAAC,IAAD,CAAQrB,UAAW,QAASwB,QAAS,WAAKrC,EAASsC,gBAAmBV,KAAK,UAAUW,QAAM,EAA3F,mBAGA,cAAC,IAAD,CAAS1B,UAAW,QAASwB,QAAS,WA1D9C5B,EAAQ+B,UA0DoDZ,KAAK,UAAzD,SACI,cAAC,oBAAD","file":"static/js/5.96ad11f5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Button, Radio, Slider} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    resetSettings,\r\n    setBoardSize,\r\n    setCardStyle,\r\n    setDifficulty,\r\n    setMusicVolume,\r\n    setSoundsVolume\r\n} from \"../../redux/game-reducer\";\r\nimport {getBoardSize, getDifficulty, getMusicVolume, getSoundsVolume} from \"../../redux/selectors/selectors\";\r\nimport {ArrowLeftOutlined} from \"@ant-design/icons/lib\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Setting: React.FC<{}> = () => {\r\n    const dispatch = useDispatch()\r\n    const musicVolume = useSelector(getMusicVolume)\r\n    const soundsVolume = useSelector(getSoundsVolume)\r\n    const boardSize = useSelector(getBoardSize)\r\n    const history = useHistory()\r\n    const difficulty = useSelector(getDifficulty)\r\n    const back = () => {\r\n        history.goBack()\r\n    }\r\n    const loadFile = (e: any) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(e.target?.files[0])\r\n        reader.onloadend = function() {\r\n            const base64data = reader.result;\r\n            //@ts-ignore\r\n            dispatch(setCardStyle(base64data))\r\n            //@ts-ignore\r\n            localStorage.setItem(\"imgURL\", base64data) // https://stackoverflow.com/questions/18650168/convert-blob-to-base64\r\n        }\r\n    }\r\n\r\n\r\n    const onAfterChangeMusic = (value: number) => {\r\n        dispatch(setMusicVolume(value/100))\r\n        localStorage.setItem(\"musicVolume\", `${value/100}`)\r\n    }\r\n    const onAfterChangeSounds = (value: number) => {\r\n        dispatch(setSoundsVolume(value/100))\r\n        localStorage.setItem(\"soundsVolume\", `${value/100}`)\r\n    }\r\n    const onAfterChangeBoardSize = (e: any) => {\r\n        dispatch(setBoardSize(e.target.value))\r\n        localStorage.setItem(\"boardSize\", `${e.target.value}`)\r\n    }\r\n    const onAfterChangeDifficulty = (e: any) => {\r\n        dispatch(setDifficulty(e.target.value))\r\n        localStorage.setItem(\"difficulty\", `${e.target.value}`)\r\n    }\r\n    return (\r\n        <div className={`menu settings`}>\r\n            <div className={\"menu-content\"}>\r\n                <label className={\"label\"}> Difficulty </label>\r\n                <Radio.Group defaultValue={difficulty} buttonStyle=\"solid\" onChange={onAfterChangeDifficulty}>\r\n                    <Radio.Button value=\"easy\">Easy</Radio.Button>\r\n                    <Radio.Button value=\"normal\">Normal</Radio.Button>\r\n                    <Radio.Button value=\"hard\">Hard</Radio.Button>\r\n                </Radio.Group>\r\n                <label className={\"label\"}> Board size </label>\r\n                <Radio.Group defaultValue={boardSize} buttonStyle=\"solid\" onChange={onAfterChangeBoardSize}>\r\n                    <Radio.Button value=\"small\">Small</Radio.Button>\r\n                    <Radio.Button value=\"normal\">Normal</Radio.Button>\r\n                    <Radio.Button value=\"big\">Big</Radio.Button>\r\n                    <Radio.Button value=\"huge\">Huge</Radio.Button>\r\n                </Radio.Group>\r\n                <label className={\"label\"}> Music </label>\r\n                <Slider className={\"slider\"} defaultValue={musicVolume*100} onChange={onAfterChangeMusic}/>\r\n                <label className={\"label\"}> Sounds </label>\r\n                <Slider className={\"slider\"} defaultValue={soundsVolume*100} onChange={onAfterChangeSounds}/>\r\n                <label className={\"label label-input reset\"}> Upload your own card style\r\n                <input type=\"file\" className={\"file-input\"}  onChange={loadFile}/>\r\n                </label>\r\n\r\n                <Button className={\"reset\"} onClick={()=>{dispatch(resetSettings())}} type=\"primary\" danger>\r\n                    Reset\r\n                </Button>\r\n                <Button  className={\"reset\"} onClick={()=>{back()}} type=\"primary\">\r\n                    <ArrowLeftOutlined />\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setting"],"sourceRoot":""}