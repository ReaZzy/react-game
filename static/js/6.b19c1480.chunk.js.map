{"version":3,"sources":["components/Settings/Settings.tsx"],"names":["Setting","useState","error","setError","dispatch","useDispatch","musicVolume","useSelector","getMusicVolume","soundsVolume","getSoundsVolume","boardSize","getBoardSize","history","useHistory","difficulty","getDifficulty","autoPlay","getAutoPlay","className","Group","defaultValue","value","buttonStyle","onChange","e","setDifficulty","target","Button","setBoardSize","setMusicVolume","localStorage","setItem","setSoundsVolume","style","backgroundColor","type","reader","FileReader","files","readAsDataURL","onerror","console","log","onloadend","base64data","result","size","setTimeout","setCardStyle","setImg","display","marginTop","checked","setAutoPlay","level","Text","keyboard","onClick","resetSettings","danger","goBack"],"mappings":"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","file":"static/js/6.b19c1480.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Button, Radio, Slider, Switch, Typography} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    resetSettings, setAutoPlay,\r\n    setBoardSize,\r\n    setCardStyle,\r\n    setDifficulty,\r\n    setMusicVolume,\r\n    setSoundsVolume\r\n} from \"../../redux/game-reducer\";\r\nimport {\r\n    getAutoPlay,\r\n    getBoardSize,\r\n    getDifficulty,\r\n    getMusicVolume,\r\n    getSoundsVolume\r\n} from \"../../redux/selectors/selectors\";\r\nimport {ArrowLeftOutlined} from \"@ant-design/icons/lib\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport Title from \"antd/lib/typography/Title\";\r\n\r\nconst Setting: React.FC<{}> = () => {\r\n    const [error, setError] = useState<boolean>(false)\r\n    const dispatch = useDispatch()\r\n    const musicVolume = useSelector(getMusicVolume)\r\n    const soundsVolume = useSelector(getSoundsVolume)\r\n    const boardSize = useSelector(getBoardSize)\r\n    const history = useHistory()\r\n    const difficulty = useSelector(getDifficulty)\r\n    const autoPlay = useSelector(getAutoPlay)\r\n    const back = () => {\r\n        history.goBack()\r\n    }\r\n    const setImg = (base64data: any) => {\r\n        localStorage.setItem(\"imgURL\", base64data)\r\n        setError(false)\r\n        dispatch(setCardStyle(base64data))\r\n    }\r\n    const setErrorFunc = () => {\r\n        setError(true)\r\n        setTimeout(() => {\r\n            setError(false)\r\n        }, 2000)\r\n    }\r\n    const loadFile = (e: any) => {\r\n        const reader = new FileReader();\r\n        if (e.target.files[0]) {\r\n            reader.readAsDataURL(e.target.files[0]);\r\n        }\r\n        reader.onerror = function () {\r\n            console.log(\"error\")\r\n        }\r\n        reader.onloadend = function () { // https://stackoverflow.com/questions/18650168/convert-blob-to-base64\r\n            const base64data = reader.result;\r\n            e.target?.files[0].size >= 1000000\r\n                ? setErrorFunc()\r\n                : setImg(base64data)\r\n        }\r\n    }\r\n\r\n\r\n    const onAfterChangeMusic = (value: number) => {\r\n        dispatch(setMusicVolume(value / 100))\r\n        localStorage.setItem(\"musicVolume\", `${value / 100}`)\r\n    }\r\n    const onAfterChangeSounds = (value: number) => {\r\n        dispatch(setSoundsVolume(value / 100))\r\n        localStorage.setItem(\"soundsVolume\", `${value / 100}`)\r\n    }\r\n    const onAfterChangeBoardSize = (e: any) => {\r\n        dispatch(setBoardSize(e.target.value))\r\n    }\r\n    const onAfterChangeDifficulty = (e: any) => {\r\n        dispatch(setDifficulty(e.target.value))\r\n    }\r\n\r\n    const onChangeAutoPlay = (e: boolean) => {\r\n        dispatch(setAutoPlay(e))\r\n    }\r\n    return (\r\n        <div className={`menu settings`}>\r\n            <div className={\"menu-content\"}>\r\n                <label className={\"label\"}> Difficulty </label>\r\n                <Radio.Group className={\"settings-button\"} defaultValue={difficulty} value={difficulty}\r\n                             buttonStyle=\"solid\" onChange={onAfterChangeDifficulty}>\r\n                    <Radio.Button value=\"easy\">Easy</Radio.Button>\r\n                    <Radio.Button value=\"normal\">Normal</Radio.Button>\r\n                    <Radio.Button value=\"hard\">Hard</Radio.Button>\r\n                </Radio.Group>\r\n                <label className={\"label\"}> Board size </label>\r\n                <Radio.Group className={\"settings-button\"} defaultValue={boardSize} value={boardSize}\r\n                             buttonStyle=\"solid\" onChange={onAfterChangeBoardSize}>\r\n                    <Radio.Button value=\"small\">Small</Radio.Button>\r\n                    <Radio.Button value=\"normal\">Normal</Radio.Button>\r\n                    <Radio.Button value=\"big\">Big</Radio.Button>\r\n                    <Radio.Button value=\"huge\">Huge</Radio.Button>\r\n                </Radio.Group>\r\n                <label className={\"label\"}> Music </label>\r\n                <Slider className={\"slider\"} value={musicVolume * 100} defaultValue={musicVolume * 100}\r\n                        onChange={onAfterChangeMusic}/>\r\n                <label className={\"label\"}> Sounds </label>\r\n                <Slider className={\"slider\"} value={soundsVolume * 100} defaultValue={soundsVolume * 100}\r\n                        onChange={onAfterChangeSounds}/>\r\n                <label style={{backgroundColor: error ? \"#FF0000\" : \"#1890ff\"}} className={\"label label-input reset\"}>\r\n                    {error ? \"Max image size is 1MB\" : \"Upload your card style\"}\r\n                    <input type=\"file\" className={\"file-input\"} onChange={loadFile}/>\r\n                </label>\r\n                <div style={{display:\"flex\"}}>\r\n                    <label className={\"label\"}> Autoplay </label>\r\n                    <Switch style={{marginTop:\"10px\"}} checked={autoPlay} onChange={onChangeAutoPlay}/>\r\n                </div>\r\n                <div className={\"hotkeys\"}>\r\n                    <Title level={2}>Hotkeys</Title>\r\n                    <div>\r\n                        <Button type={\"dashed\"} size={\"large\"}>CTRL + Z</Button>\r\n                        <Typography.Text keyboard>Back to homepage</Typography.Text>\r\n                    </div>\r\n                    <div>\r\n                        <Button type={\"dashed\"} size={\"large\"}>CTRL + X</Button>\r\n                        <Typography.Text keyboard>Settings</Typography.Text>\r\n                    </div>\r\n                    <div>\r\n                        <Button type={\"dashed\"} size={\"large\"}>CTRL + C</Button>\r\n                        <Typography.Text keyboard>Stats</Typography.Text>\r\n                    </div>\r\n                    <div>\r\n                        <Button type={\"dashed\"} size={\"large\"}>CTRL + V</Button>\r\n                        <Typography.Text keyboard>Refresh your board</Typography.Text>\r\n                    </div>\r\n                    <div>\r\n                        <Button type={\"dashed\"} size={\"large\"}>CTRL + ENTER</Button>\r\n                        <Typography.Text keyboard>Start game</Typography.Text>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <Button className={\"reset\"} onClick={() => {\r\n                    dispatch(resetSettings())\r\n                }} type=\"primary\" danger>\r\n                    Reset\r\n                </Button>\r\n                <Button className={\"reset\"} onClick={() => {\r\n                    back()\r\n                }} type=\"primary\">\r\n                    <ArrowLeftOutlined/>\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setting"],"sourceRoot":""}