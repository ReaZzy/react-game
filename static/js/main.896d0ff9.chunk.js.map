{"version":3,"sources":["redux/selectors/selectors.ts","sounds/wrong-audio.wav","sounds/correct-audio.wav","sounds/open-sound.wav","redux/game-reducer.ts","components/Card/Card.tsx","components/Timer/Timer.tsx","components/Game/Game.tsx","sounds/music.mp3","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["boardSelector","state","game","board","disabledBoardSelector","boardDisabled","cardPairSelector","cardPair","getGameType","gameType","getSoundsVolume","soundsVolume","getMusicVolume","musicVolume","getBoardSize","boardSize","getImgURL","imgURL","getDifficulty","difficulty","getTime","time","getScore","score","getHighScore","highScore","getGames","games","initialState","openCardAudio","Audio","openAudio","wrongAnswerAudio","wrongAudio","correctAnswerAudio","correctAudio","Date","toLocaleDateString","split","month","date","year","openCard","number","type","setBoard","setAnswers","data","disableBoard","boolean","setGame","setCardPair","card","setCardPairs","cards","setMusicVolume","volume","setSoundsVolume","setBoardSize","setCardStyle","setDifficulty","setTimer","setScore","setHighScore","setGames","answer","dispatch","getState","a","wrong","play","setTimeout","correct","localStorage","setItem","JSON","stringify","length","content","every","e","setGameToStats","map","backOptions","boardItems","sort","Math","random","removeItem","backToMainMenu","refreshBoard","winOrLose","key","startGame","resetSettings","lose","setLocalStorage","localStorageCardPair","getItem","localStorageGameType","localStorageMusicVolume","localStorageSoundsVolume","localStorageBoardSize","localStorageImageURL","localStorageDifficulty","localStorageTimer","localStorageScore","localStorageHighScore","localStorageGames","lB","localStorageBoard","lT","lC","lMV","lSV","lBS","lMU","lD","lTM","lS","lHS","lG","parse","gameReducer","action","i","condition","Card","index","useDispatch","useSelector","className","onClick","src","alt","id","Timer","useEffect","timer","setInterval","clearInterval","size","danger","ClockCircleOutlined","Game","disabledBoard","to","Settings","React","lazy","Stats","App","useSound","music","Number","interrupt","stop","Array","fill","path","render","fallback","href","rel","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.896d0ff9.chunk.js","sourcesContent":["import {AppStateType} from \"../store\";\r\n\r\nexport const boardSelector = (state:AppStateType)=> {\r\n    return state?.game?.board\r\n}\r\n\r\nexport const disabledBoardSelector = (state:AppStateType) => {\r\n    return state?.game?.boardDisabled\r\n}\r\nexport const cardPairSelector = (state:AppStateType) => {\r\n    return state?.game?.cardPair\r\n}\r\nexport const getGameType = (state:AppStateType) => {\r\n    return state?.game?.gameType\r\n}\r\nexport const getSoundsVolume = (state:AppStateType) => {\r\n    return state?.game?.soundsVolume\r\n}\r\nexport const getMusicVolume = (state:AppStateType) => {\r\n    return state?.game?.musicVolume\r\n}\r\nexport const getBoardSize = (state:AppStateType) => {\r\n    return state?.game?.boardSize\r\n}\r\nexport const getImgURL = (state:AppStateType) => {\r\n    return state?.game?.imgURL\r\n}\r\nexport const getDifficulty = (state:AppStateType) => {\r\n    return state?.game?.difficulty\r\n}\r\nexport const getTime = (state:AppStateType) => {\r\n    return state?.game?.time\r\n}\r\nexport const getScore = (state:AppStateType) => {\r\n    return state?.game?.score\r\n}\r\nexport const getHighScore = (state:AppStateType) => {\r\n    return state?.game?.highScore\r\n}\r\nexport const getGames = (state:AppStateType) => {\r\n    return state?.game?.games\r\n}\r\n","export default __webpack_public_path__ + \"static/media/wrong-audio.70fff5c7.wav\";","export default __webpack_public_path__ + \"static/media/correct-audio.62721562.wav\";","export default __webpack_public_path__ + \"static/media/open-sound.15057a5c.wav\";","import {CardType} from \"../App\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n// @ts-ignore\r\nimport wrongAudio from \"./../sounds/wrong-audio.wav\"\r\n// @ts-ignore\r\nimport correctAudio from \"./../sounds/correct-audio.wav\"\r\n// @ts-ignore\r\nimport openAudio from \"./../sounds/open-sound.wav\"\r\n\r\nexport type GameType = {\r\n    key: number\r\n    date: string,\r\n    winOrLose: \"win\" | \"lose\"\r\n    boardSize: string\r\n    difficulty: string,\r\n    score: number,\r\n    time: number\r\n}\r\n\r\nconst initialState = {\r\n    board: [] as Array<CardType>,\r\n    boardDisabled: false,\r\n    cardPair: [] as Array<CardType>,\r\n    gameType: \"wait\" as \"wait\" | \"playing\" | \"win\" | \"lose\",\r\n    musicVolume: 1,\r\n    soundsVolume: 1,\r\n    boardSize: \"normal\",\r\n    games: [] as Array<GameType>,\r\n    imgURL: null as string | null,\r\n    difficulty: \"normal\",\r\n    time: 0,\r\n    score: 0,\r\n    highScore: 0,\r\n};\r\ntype initialStateType = typeof initialState;\r\n\r\n\r\n// AUDIO\r\nconst openCardAudio = new Audio(openAudio)\r\nconst wrongAnswerAudio = new Audio(wrongAudio)\r\nconst correctAnswerAudio = new Audio(correctAudio)\r\nlet [month, date, year]    = new Date().toLocaleDateString(\"en-US\").split(\"/\")\r\n\r\nconst gameReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_BOARD\": {\r\n            return {\r\n                ...state,\r\n                board: [...action.board]\r\n            }\r\n        }\r\n        case \"OPEN_CARD\": {\r\n            openCardAudio.play()\r\n            return {\r\n                ...state,\r\n                board: state.board.map((board, i) => {\r\n                    return i === action.number ? {...board, type: \"open\"} : board\r\n                })\r\n            }\r\n        }\r\n        case \"SET_ANSWERS\": {\r\n            const {cardPair, type} = action.data\r\n            const condition = (e: CardType, type: \"wrong\" | \"correct\" | \"open\" | \"closed\") => {\r\n                return e.content === cardPair[0].content || e.content === cardPair[1].content\r\n                    ? {...e, type: type}\r\n                    : e\r\n            }\r\n            return {\r\n                ...state,\r\n                board: state.board.map((e: CardType) =>\r\n                    e.type === \"open\"\r\n                        ? condition(e, type)\r\n                        : e.type === \"wrong\" ? condition(e, type) : e\r\n                )\r\n            }\r\n        }\r\n        case \"SET_GAME_TYPE\": {\r\n            return {...state, gameType: action.gameType}\r\n        }\r\n        case \"SET_BOARD_SIZE\": {\r\n            return {...state, boardSize: action.boardSize}\r\n        }\r\n        case \"DISABLE_BOARD\": {\r\n            return {...state, boardDisabled: action.boolean}\r\n        }\r\n        case \"SET_SOUNDS_VOLUME\": {\r\n            return {...state, soundsVolume: action.volume}\r\n        }\r\n        case \"SET_MUSIC_VOLUME\": {\r\n            return {...state, musicVolume: action.volume}\r\n        }\r\n        case \"SET_CARD_PAIR\": {\r\n            return {...state, cardPair: [...state.cardPair, action.card]}\r\n        }\r\n        case \"SET_CARD_STYLE\": {\r\n            return {...state, imgURL: action.imgURL}\r\n        }\r\n        case \"SET_CARD_PAIRS\": {\r\n            return {...state, cardPair: [...action.cards]}\r\n        }\r\n        case \"SET_DIFFICULTY\": {\r\n            return {...state, difficulty: action.difficulty}\r\n        }\r\n        case \"SET_TIMER\": {\r\n            return {...state, time: action.time}\r\n        }\r\n        case \"SET_SCORE\":{\r\n            return {...state, score: action.score}\r\n        }\r\n        case \"SET_HIGH_SCORE\":{\r\n            return {...state, highScore: action.score}\r\n        }\r\n        case \"SET_GAMES\":{\r\n            return {...state, games: [action.game, ...state.games]}\r\n        }\r\n        case \"SET_ALL_GAMES\":{\r\n            return {...state, games: action.games}\r\n        }\r\n\r\n        case \"CLEAR_CARD_PAIR\": {\r\n            return {...state, cardPair: []}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ActionsType =\r\n    openCardType\r\n    | setBoardType\r\n    | setAnswersType\r\n    | disableBoardType\r\n    | clearCardPairType\r\n    | setCardPairType\r\n    | setGameType\r\n    | setCardPairsType\r\n    | setSoundsVolumeType\r\n    | setMusicVolumeType\r\n    | setBoardSizeType\r\n    | setCardStyleType\r\n    | setDifficultyType\r\n    | setScoreType\r\n    | setTimerType\r\n    | setHighScoreType\r\n    | setGamesType\r\n    | setAllGamesType\r\n\r\nexport const openCard = (number: number): openCardType => ({\r\n    type: \"OPEN_CARD\",\r\n    number,\r\n});\r\ntype openCardType = {\r\n    type: \"OPEN_CARD\";\r\n    number: number;\r\n};\r\n\r\nexport const setBoard = (board: Array<CardType>): setBoardType => ({\r\n    type: \"SET_BOARD\",\r\n    board,\r\n});\r\ntype setBoardType = {\r\n    type: \"SET_BOARD\";\r\n    board: Array<CardType>;\r\n};\r\n\r\nexport const setAnswers = (cardPair: Array<CardType>, type: \"wrong\" | \"correct\" | \"closed\" | \"open\"): setAnswersType => ({\r\n    type: \"SET_ANSWERS\",\r\n    data: {\r\n        cardPair, type\r\n    }\r\n})\r\ntype setAnswersType = {\r\n    type: \"SET_ANSWERS\";\r\n    data: {\r\n        cardPair: Array<CardType>,\r\n        type: \"wrong\" | \"correct\" | \"closed\" | \"open\"\r\n    }\r\n}\r\n\r\nexport const disableBoard = (boolean: boolean): disableBoardType => ({type: \"DISABLE_BOARD\", boolean})\r\ntype disableBoardType = { type: \"DISABLE_BOARD\", boolean: boolean }\r\nexport const setGame = (gameType: \"wait\" | \"playing\" | \"win\" | \"lose\"): setGameType => ({\r\n    type: \"SET_GAME_TYPE\",\r\n    gameType\r\n})\r\ntype setGameType = { type: \"SET_GAME_TYPE\", gameType: \"wait\" | \"playing\" | \"win\" | \"lose\" }\r\nexport const setCardPair = (card: CardType): setCardPairType => ({type: \"SET_CARD_PAIR\", card})\r\ntype setCardPairType = { type: \"SET_CARD_PAIR\", card: CardType }\r\nexport const setCardPairs = (cards: Array<CardType>): setCardPairsType => ({type: \"SET_CARD_PAIRS\", cards})\r\ntype setCardPairsType = { type: \"SET_CARD_PAIRS\", cards: Array<CardType> }\r\nconst clearCardPair = (): clearCardPairType => ({type: \"CLEAR_CARD_PAIR\"})\r\ntype clearCardPairType = { type: \"CLEAR_CARD_PAIR\" }\r\nexport const setMusicVolume = (volume: number): setMusicVolumeType => ({type: \"SET_MUSIC_VOLUME\", volume})\r\ntype setMusicVolumeType = { type: \"SET_MUSIC_VOLUME\", volume: number }\r\nexport const setSoundsVolume = (volume: number): setSoundsVolumeType => ({type: \"SET_SOUNDS_VOLUME\", volume})\r\ntype setSoundsVolumeType = { type: \"SET_SOUNDS_VOLUME\", volume: number }\r\nexport const setBoardSize = (boardSize: string): setBoardSizeType => ({type: \"SET_BOARD_SIZE\", boardSize})\r\ntype setBoardSizeType = { type: \"SET_BOARD_SIZE\", boardSize: string }\r\nexport const setCardStyle = (imgURL: string): setCardStyleType => ({type: \"SET_CARD_STYLE\", imgURL})\r\ntype setCardStyleType = { type: \"SET_CARD_STYLE\", imgURL: string }\r\nexport const setDifficulty = (difficulty: string): setDifficultyType => ({type: \"SET_DIFFICULTY\", difficulty})\r\ntype setDifficultyType = { type: \"SET_DIFFICULTY\", difficulty: string }\r\nexport const setTimer = (time: number): setTimerType => ({type: \"SET_TIMER\", time})\r\ntype setTimerType = { type: \"SET_TIMER\", time: number }\r\nexport const setScore = (score: number): setScoreType => ({type: \"SET_SCORE\", score})\r\ntype setScoreType = { type: \"SET_SCORE\", score: number }\r\nexport const setHighScore = (score: number): setHighScoreType => ({type: \"SET_HIGH_SCORE\", score})\r\ntype setHighScoreType = { type: \"SET_HIGH_SCORE\", score: number }\r\nexport const setGames = (game: GameType): setGamesType => ({type: \"SET_GAMES\", game})\r\ntype setGamesType = { type: \"SET_GAMES\", game: GameType }\r\nexport const setAllGames = (games: Array<GameType>): setAllGamesType => ({type: \"SET_ALL_GAMES\", games})\r\ntype setAllGamesType = { type: \"SET_ALL_GAMES\", games: Array<GameType>}\r\n\r\nexport const answer = (cardPair: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n\r\n    const {game} = getState()\r\n\r\n    openCardAudio.volume = game.soundsVolume\r\n    wrongAnswerAudio.volume = game.soundsVolume\r\n    correctAnswerAudio.volume = game.soundsVolume\r\n\r\n    const wrong = () => {\r\n        wrongAnswerAudio.play()\r\n        dispatch(disableBoard(true))\r\n        dispatch(setAnswers(cardPair, \"wrong\"))\r\n        setTimeout(() => {\r\n            dispatch(setAnswers(cardPair, \"closed\"))\r\n            dispatch(disableBoard(false))\r\n        }, 1000)\r\n    }\r\n    const correct = () => {\r\n        correctAnswerAudio.play()\r\n        dispatch(setAnswers(cardPair, \"correct\"))\r\n        dispatch(setScore(game.score+2))\r\n        if(game.score >= game.highScore){\r\n            dispatch(setHighScore(game.score+2))\r\n            localStorage.setItem(\"highScore\", JSON.stringify(game.score+2))\r\n        }\r\n    }\r\n\r\n    if (cardPair.length === 2) {\r\n        cardPair[0].content === cardPair[1].content\r\n            ? correct()\r\n            : wrong()\r\n        dispatch(clearCardPair())\r\n    }\r\n\r\n    if (game.board.every((e: CardType) => e.type === \"correct\")) {\r\n        dispatch(setGame(\"win\"))\r\n        await dispatch(setGameToStats(\"win\"))\r\n    }\r\n\r\n    localStorage.setItem(\"board\", JSON.stringify(game.board.map((e: CardType) => e.type === \"wrong\" ? {\r\n        content: e.content,\r\n        type: \"closed\"\r\n    } : e)))\r\n    localStorage.setItem(\"gameType\", JSON.stringify(game.gameType))\r\n    localStorage.setItem(\"cardPair\", JSON.stringify(cardPair))\r\n    localStorage.setItem(\"score\", JSON.stringify(game.score))\r\n}\r\n\r\n\r\n\r\nconst backOptions = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n    const {game} = getState()\r\n    dispatch(setGame(\"wait\"))\r\n    dispatch(setCardPairs([]))\r\n    dispatch(setScore(0))\r\n    dispatch(setBoard([...boardItems, ...boardItems].sort(() => 0.5 - Math.random())))\r\n    dispatch(setTimer(game.difficulty === \"easy\" ? 60 : game.difficulty === \"normal\" ? 50 : 30))\r\n    localStorage.removeItem(\"cardPair\")\r\n}\r\nexport const backToMainMenu = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n    dispatch(backOptions(boardItems))\r\n    localStorage.removeItem(\"board\")\r\n    localStorage.removeItem(\"gameType\")\r\n}\r\nexport const refreshBoard = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n    openCardAudio.play()\r\n    dispatch(backOptions(boardItems))\r\n}\r\nconst setGameToStats = (winOrLose: \"win\" | \"lose\"): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n    const {game} = getState()\r\n    dispatch(setGames({\r\n        key: Math.random(),\r\n        date: `${month}/${date}/${year}`,\r\n        boardSize: game.boardSize,\r\n        difficulty: game.difficulty,\r\n        score: game.score,\r\n        winOrLose: winOrLose,\r\n        time: (game.difficulty === \"easy\" ? 60 : game.difficulty === \"normal\" ? 50 : 30) - game.time\r\n    }))\r\n    localStorage.setItem(\"games\", JSON.stringify([{\r\n        key: Math.random(),\r\n        date: `${month}/${date}/${year}`,\r\n        boardSize: game.boardSize,\r\n        difficulty: game.difficulty,\r\n        score: game.score,\r\n        winOrLose: winOrLose,\r\n        time: (game.difficulty === \"easy\" ? 60 : game.difficulty === \"normal\" ? 50 : 30) - game.time\r\n    }, ...game.games]))\r\n}\r\n\r\nexport const startGame = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n    const {game} = getState()\r\n    dispatch(setBoard([...boardItems, ...boardItems].sort(() => 0.5 - Math.random())))\r\n    dispatch(setGame(\"playing\"))\r\n    dispatch(setScore(0))\r\n    dispatch(setCardPairs([]))\r\n    dispatch(setTimer(game.difficulty === \"easy\" ? 60 : game.difficulty === \"normal\" ? 50 : 30))\r\n    localStorage.removeItem(\"cardPair\")\r\n}\r\nexport const resetSettings = (): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    dispatch(setCardStyle(\"\"))\r\n    localStorage.removeItem(\"imgURL\")\r\n}\r\nexport const lose = (): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    dispatch(setGame(\"lose\"))\r\n    await dispatch(setGameToStats(\"lose\"))\r\n    localStorage.setItem(\"gameType\", JSON.stringify(\"lose\"))\r\n}\r\n\r\nexport const setLocalStorage = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    const localStorageBoard = (): string | null => localStorage.getItem(\"board\")\r\n    const localStorageCardPair = (): string | null => localStorage.getItem(\"cardPair\")\r\n    const localStorageGameType = (): string | null => localStorage.getItem(\"gameType\")\r\n    const localStorageMusicVolume = (): string | null => localStorage.getItem(\"musicVolume\")\r\n    const localStorageSoundsVolume = (): string | null => localStorage.getItem(\"soundsVolume\")\r\n    const localStorageBoardSize = (): string | null => localStorage.getItem(\"boardSize\")\r\n    const localStorageImageURL = (): string | null => localStorage.getItem(\"imgURL\")\r\n    const localStorageDifficulty = (): string | null => localStorage.getItem(\"difficulty\")\r\n    const localStorageTimer = (): string | null => localStorage.getItem(\"timer\")\r\n    const localStorageScore = (): string | null => localStorage.getItem(\"score\")\r\n    const localStorageHighScore = (): string | null => localStorage.getItem(\"highScore\")\r\n    const localStorageGames = (): string | null => localStorage.getItem(\"games\")\r\n    const lB = localStorageBoard()\r\n    const lT = localStorageGameType()\r\n    const lC = localStorageCardPair()\r\n    const lMV = localStorageMusicVolume()\r\n    const lSV = localStorageSoundsVolume()\r\n    const lBS = localStorageBoardSize()\r\n    const lMU = localStorageImageURL()\r\n    const lD = localStorageDifficulty()\r\n    const lTM = localStorageTimer()\r\n    const lS = localStorageScore()\r\n    const lHS = localStorageHighScore()\r\n    const lG = localStorageGames()\r\n    lC && dispatch(setCardPairs(JSON.parse(lC)))\r\n    lT && dispatch(setGame(JSON.parse(lT)))\r\n    lMV && dispatch(setMusicVolume(JSON.parse(lMV)))\r\n    lSV && dispatch(setSoundsVolume(JSON.parse(lSV)))\r\n    lMU && dispatch(setCardStyle(lMU))\r\n    lD && dispatch(setDifficulty(lD))\r\n    lBS && dispatch(setBoardSize(lBS))\r\n    lTM && dispatch(setTimer(+lTM))\r\n    lS && dispatch(setScore(+lS))\r\n    lHS && dispatch(setHighScore(+lHS))\r\n    lG && dispatch(setAllGames(JSON.parse(lG)))\r\n    lB\r\n        ? dispatch(setBoard(JSON.parse(lB)))\r\n        : dispatch(setBoard([...boardItems, ...boardItems].sort(() => 0.5 - Math.random())))\r\n}\r\n\r\nexport default gameReducer","import React from \"react\";\r\nimport {CardType} from \"../../App\";\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {openCard, setCardPair} from \"../../redux/game-reducer\";\r\nimport {getImgURL} from \"../../redux/selectors/selectors\";\r\n\r\ntype CardComponentType = {\r\n    card: CardType;\r\n    index: number;\r\n    cardPair: Array<CardType>\r\n};\r\n\r\n\r\n\r\nexport const Card: React.FC<CardComponentType> = (\r\n    {card, index}\r\n    ) => {\r\n    const dispatch = useDispatch()\r\n    const imgURL = useSelector(getImgURL)\r\n\r\n    const handleClick = (i: number) => {\r\n        if(card.type === \"closed\"){\r\n            dispatch(openCard(i))\r\n            dispatch(setCardPair(card))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`card ${card.type}`}\r\n               onClick={() => handleClick(index)}>\r\n            <div className={\"content\"}>\r\n                <div className={\"front\"}> {card.type !== \"closed\" && `${card.content}`} </div>\r\n                <div className={\"back\"}> {imgURL && <img src={`${imgURL}`} alt={\"card\"} id={\"output\"}/>} </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getTime} from \"../../redux/selectors/selectors\";\r\nimport {lose, setTimer} from \"../../redux/game-reducer\";\r\nimport {Button} from \"antd\";\r\nimport { ClockCircleOutlined } from \"@ant-design/icons\";\r\n\r\nexport const Timer:React.FC<{}> = () => {\r\n    const time = useSelector(getTime)\r\n    const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        const timer = setInterval(()=>{\r\n            if (time > 0){\r\n                localStorage.setItem(\"timer\", `${time-1}`)\r\n                dispatch(setTimer(time-1))\r\n            }\r\n            else{\r\n                dispatch(lose())\r\n            }\r\n        }, 1000)\r\n        return ()=>{\r\n            clearInterval(timer)\r\n        }\r\n    }, [time]) //eslint-disable-line\r\n\r\n    return(\r\n        <Button size={\"large\"} className={\"timer\"} danger = {time < 10}>\r\n            <ClockCircleOutlined /> {time}\r\n        </Button>\r\n    )\r\n}","import React  from \"react\";\r\nimport {Card} from \"../Card/Card\";\r\nimport {Button} from \"antd\";\r\nimport {backToMainMenu, refreshBoard, startGame} from \"../../redux/game-reducer\";\r\nimport {CardType} from \"../../App\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    boardSelector,\r\n    cardPairSelector,\r\n    disabledBoardSelector,\r\n    getBoardSize,\r\n    getGameType, getHighScore, getScore\r\n} from \"../../redux/selectors/selectors\";\r\nimport {ArrowLeftOutlined, BarChartOutlined, CaretRightOutlined, ReloadOutlined, SettingOutlined} from \"@ant-design/icons/lib\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Timer} from \"../Timer/Timer\";\r\n\r\nexport const Game: React.FC<{boardItems:Array<CardType>}> = ({boardItems}) => {\r\n\r\n    const disabledBoard = useSelector(disabledBoardSelector)\r\n    const dispatch = useDispatch()\r\n    const gameType = useSelector(getGameType)\r\n    const board = useSelector(boardSelector)\r\n    const cardPair = useSelector(cardPairSelector)\r\n    const boardSize = useSelector(getBoardSize)\r\n    const score = useSelector(getScore)\r\n    const highScore = useSelector(getHighScore)\r\n\r\n    return (\r\n        <div>\r\n            {gameType === \"playing\"\r\n                ? <div className=\"appContent\">\r\n                    <div className=\"score\">\r\n                        <Button size={\"large\"}>Current score: {score}</Button>\r\n                        <Button size={\"large\"}>High score: {highScore}</Button>\r\n                        <Timer/>\r\n                    </div>\r\n                    <div className={`board ${boardSize} ${disabledBoard && \"disabled\"}`}>\r\n                        {board?.map((card: CardType, index: number) => {\r\n                            return (\r\n                                <Card cardPair={cardPair}\r\n                                      index={index}\r\n                                      card={card}\r\n                                      key={index}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    <Button onClick={() => {\r\n                        dispatch(refreshBoard(boardItems))\r\n                    }} className={\"reset-button\"} type=\"primary\" size={\"large\"}>\r\n                        <ReloadOutlined/>\r\n                    </Button>\r\n                    <Button onClick={() => {\r\n                        dispatch(backToMainMenu(boardItems))\r\n                    }} className={\"reset-button\"} type=\"primary\" size={\"large\"}>\r\n                        <ArrowLeftOutlined/>\r\n                    </Button>\r\n                </div>\r\n\r\n                : <div className={`menu ${gameType} ${boardSize}`}>\r\n                    <div className={\"menu-content\"}>\r\n                        <div className={\"text\"}>\r\n                            <div className={\"end-text\"}>\r\n                                {gameType === \"win\"\r\n                                    ? \"You won !\"\r\n                                    : gameType === \"lose\"\r\n                                        ? \"You lose :(\"\r\n                                        : gameType === \"wait\"\r\n                                        && \"Memory game\"\r\n                                }\r\n                            </div>\r\n                            <div>\r\n                                <div className={\"small-text\"}>\r\n                                    High score: {highScore}\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div>\r\n                            <Button type=\"primary\" size={\"large\"} onClick={() => {\r\n                                dispatch(startGame(boardItems))\r\n                            }}>\r\n                                {gameType !== \"wait\" ? \"Play again\" : \"Play\"} <CaretRightOutlined/>\r\n                            </Button>\r\n                            <Button type=\"primary\" size={\"large\"} onClick={()=>{dispatch(backToMainMenu(boardItems))}}>\r\n                                <Link to={\"/settings\"}><SettingOutlined/></Link>\r\n                            </Button>\r\n                            <Button type=\"primary\" size={\"large\"} onClick={()=>{dispatch(backToMainMenu(boardItems))}}>\r\n                                <Link to={\"/stats\"}><BarChartOutlined /></Link>\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/music.601c07ae.mp3\";","import React, {Suspense, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    answer,\n    setLocalStorage,\n} from \"./redux/game-reducer\";\nimport {boardSelector, cardPairSelector, getBoardSize, getGameType, getMusicVolume} from \"./redux/selectors/selectors\";\nimport {Route, Switch} from \"react-router-dom\"\nimport 'antd/dist/antd.css';\nimport {Game} from \"./components/Game/Game\";\nimport useSound from \"use-sound\";\nimport {GithubOutlined} from \"@ant-design/icons/lib\";\n//@ts-ignore\nimport music from \"./sounds/music.mp3\"\n\n\nexport type CardType = {\n    content: string;\n    type: \"open\" | \"closed\" | \"wrong\" | \"correct\";\n};\n\nconst Settings = React.lazy(()=> import(\"./components/Settings/Settings\"))\nconst Stats = React.lazy(()=> import(\"./components/Stats/Stats\"))\n\nfunction App() {\n    const dispatch = useDispatch()\n    const gameType = useSelector(getGameType)\n    const board = useSelector(boardSelector)\n    const cardPair = useSelector(cardPairSelector)\n    const musicVolume = useSelector(getMusicVolume)\n    const boardSize = useSelector(getBoardSize)\n\n    const [play, {stop}] = useSound(music, {volume: Number(localStorage.getItem(\"musicVolume\") || musicVolume) , interrupt: true})\n    useEffect(()=>{\n        gameType===\"wait\"?play():stop()\n    },[play,gameType]) // eslint-disable-line\n    useEffect(() => {\n       dispatch(setLocalStorage(boardItems))\n    }, []) // eslint-disable-line\n    useEffect(() => {\n        dispatch(answer([...cardPair]))\n    }, [board]) // eslint-disable-line\n    const boardItemsCount = boardSize === \"small\" ? 4 : boardSize === \"normal\" ? 8 : boardSize === \"big\" ? 10 : 18\n    const boardItems: Array<CardType> = Array(boardItemsCount).fill(0).map((e:number,index:number) => ( {content:`${index}`, type:\"closed\"}))\n\n    return (\n        <div className=\"App\">\n            <div className={\"game\"}>\n                <Switch>\n                    <Route  path={\"/settings\"} render={()=><Suspense fallback={<div>Loading</div>}><Settings /></Suspense>}/>\n                    <Route  path={\"/stats\"} render={()=><Suspense fallback={<div>Loading</div>}><Stats /></Suspense>}/>\n                    <Route  path={\"/\"} render={()=><Game boardItems={boardItems}/>}/>\n                    <Route  path={\"*\"} render={()=><h1>404</h1>}/>\n                </Switch>\n            </div>\n            <footer>\n                <a href={\"https://rs.school/react/\"} rel={\"noreferrer\"} target={\"_blank\"}>\n                    <img src={\"https://rs.school/images/rs_school_js.svg\"}  alt={\"course-logo\"}/>\n                </a>\n                <b>2021</b>\n                <a href={\"https://github.com/ReaZzy\"} rel={\"noreferrer\"} target={\"_blank\"}><GithubOutlined className={\"githubSvg\"}/></a>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport gameReducer from \"./game-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    game: gameReducer,\r\n});\r\ntype reducersType = typeof reducers;\r\nexport type AppStateType = ReturnType<reducersType>;\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nlet store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}