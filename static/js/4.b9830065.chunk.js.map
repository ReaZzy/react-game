{"version":3,"sources":["components/Settings/Settings.tsx"],"names":["Setting","dispatch","useDispatch","musicVolume","useSelector","getMusicVolume","soundsVolume","getSoundsVolume","boardSize","getBoardSize","history","useHistory","className","Group","defaultValue","buttonStyle","Button","value","onChange","e","setBoardSize","target","localStorage","setItem","setMusicVolume","setSoundsVolume","type","reader","FileReader","readAsDataURL","files","onloadend","base64data","result","setCardStyle","onClick","resetSettings","danger","goBack"],"mappings":"mHAAA,4FA6EeA,UArEe,WAC1B,IAAMC,EAAWC,cACXC,EAAcC,YAAYC,KAC1BC,EAAeF,YAAYG,KAC3BC,EAAYJ,YAAYK,KACxBC,EAAUC,cA6BhB,OACI,qBAAKC,UAAS,gBAAd,SACI,sBAAKA,UAAW,eAAhB,UACI,uBAAOA,UAAW,QAAlB,0BACA,eAAC,IAAMC,MAAP,CAAaC,aAAa,IAAIC,YAAY,QAA1C,UACI,cAAC,IAAMC,OAAP,CAAcC,MAAM,IAApB,kBACA,cAAC,IAAMD,OAAP,CAAcC,MAAM,IAApB,oBACA,cAAC,IAAMD,OAAP,CAAcC,MAAM,IAApB,qBAEJ,uBAAOL,UAAW,QAAlB,0BACA,eAAC,IAAMC,MAAP,CAAaC,aAAcN,EAAWO,YAAY,QAAQG,SAdvC,SAACC,GAC5BlB,EAASmB,YAAaD,EAAEE,OAAOJ,QAC/BK,aAAaC,QAAQ,YAArB,UAAqCJ,EAAEE,OAAOJ,SAYtC,UACI,cAAC,IAAMD,OAAP,CAAcC,MAAM,QAApB,mBACA,cAAC,IAAMD,OAAP,CAAcC,MAAM,SAApB,oBACA,cAAC,IAAMD,OAAP,CAAcC,MAAM,MAApB,iBACA,cAAC,IAAMD,OAAP,CAAcC,MAAM,OAApB,qBAEJ,uBAAOL,UAAW,QAAlB,qBACA,cAAC,IAAD,CAAQA,UAAW,SAAUE,aAA0B,IAAZX,EAAiBe,SA7B7C,SAACD,GACxBhB,EAASuB,YAAeP,EAAM,MAC9BK,aAAaC,QAAQ,cAArB,UAAuCN,EAAM,SA4BrC,uBAAOL,UAAW,QAAlB,sBACA,cAAC,IAAD,CAAQA,UAAW,SAAUE,aAA2B,IAAbR,EAAkBY,SA3B7C,SAACD,GACzBhB,EAASwB,YAAgBR,EAAM,MAC/BK,aAAaC,QAAQ,eAArB,UAAwCN,EAAM,SA0BtC,wBAAOL,UAAW,oBAAlB,wCACA,uBAAOc,KAAK,OAAOd,UAAW,aAAeM,SA9CxC,SAACC,GAAY,IAAD,EACnBQ,EAAS,IAAIC,WACnBD,EAAOE,cAAP,UAAqBV,EAAEE,cAAvB,aAAqB,EAAUS,MAAM,IACrCH,EAAOI,UAAY,WACf,IAAMC,EAAaL,EAAOM,OAE1BhC,EAASiC,YAAaF,IAEtBV,aAAaC,QAAQ,SAAUS,UAyC3B,cAAC,IAAD,CAAQpB,UAAW,QAASuB,QAAS,WAAKlC,EAASmC,gBAAmBV,KAAK,UAAUW,QAAM,EAA3F,mBAGA,cAAC,IAAD,CAAQzB,UAAW,QAASuB,QAAS,WAtD7CzB,EAAQ4B,UAsDmDZ,KAAK,UAAxD,SACI,cAAC,oBAAD","file":"static/js/4.b9830065.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Button, Radio, Slider} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {resetSettings, setBoardSize, setCardStyle, setMusicVolume, setSoundsVolume} from \"../../redux/game-reducer\";\r\nimport {getBoardSize, getMusicVolume, getSoundsVolume} from \"../../redux/selectors/selectors\";\r\nimport {ArrowLeftOutlined} from \"@ant-design/icons/lib\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Setting: React.FC<{}> = () => {\r\n    const dispatch = useDispatch()\r\n    const musicVolume = useSelector(getMusicVolume)\r\n    const soundsVolume = useSelector(getSoundsVolume)\r\n    const boardSize = useSelector(getBoardSize)\r\n    const history = useHistory()\r\n    const back = () => {\r\n        history.goBack()\r\n    }\r\n    const loadFile = (e: any) => {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(e.target?.files[0])\r\n        reader.onloadend = function() {\r\n            const base64data = reader.result;\r\n            //@ts-ignore\r\n            dispatch(setCardStyle(base64data))\r\n            //@ts-ignore\r\n            localStorage.setItem(\"imgURL\", base64data) // https://stackoverflow.com/questions/18650168/convert-blob-to-base64\r\n        }\r\n    }\r\n\r\n\r\n    const onAfterChangeMusic = (value: number) => {\r\n        dispatch(setMusicVolume(value/100))\r\n        localStorage.setItem(\"musicVolume\", `${value/100}`)\r\n    }\r\n    const onAfterChangeSounds = (value: number) => {\r\n        dispatch(setSoundsVolume(value/100))\r\n        localStorage.setItem(\"soundsVolume\", `${value/100}`)\r\n    }\r\n    const onAfterChangeBoardSize = (e: any) => {\r\n        dispatch(setBoardSize(e.target.value))\r\n        localStorage.setItem(\"boardSize\", `${e.target.value}`)\r\n    }\r\n    return (\r\n        <div className={`menu settings`}>\r\n            <div className={\"menu-content\"}>\r\n                <label className={\"label\"}> Difficulty </label>\r\n                <Radio.Group defaultValue=\"a\" buttonStyle=\"solid\">\r\n                    <Radio.Button value=\"a\">Easy</Radio.Button>\r\n                    <Radio.Button value=\"b\">Normal</Radio.Button>\r\n                    <Radio.Button value=\"c\">Hard</Radio.Button>\r\n                </Radio.Group>\r\n                <label className={\"label\"}> Board size </label>\r\n                <Radio.Group defaultValue={boardSize} buttonStyle=\"solid\" onChange={onAfterChangeBoardSize}>\r\n                    <Radio.Button value=\"small\">Small</Radio.Button>\r\n                    <Radio.Button value=\"normal\">Normal</Radio.Button>\r\n                    <Radio.Button value=\"big\">Big</Radio.Button>\r\n                    <Radio.Button value=\"huge\">Huge</Radio.Button>\r\n                </Radio.Group>\r\n                <label className={\"label\"}> Music </label>\r\n                <Slider className={\"slider\"} defaultValue={musicVolume*100} onChange={onAfterChangeMusic}/>\r\n                <label className={\"label\"}> Sounds </label>\r\n                <Slider className={\"slider\"} defaultValue={soundsVolume*100} onChange={onAfterChangeSounds}/>\r\n                <label className={\"label label-input\"}> Upload your own card style\r\n                <input type=\"file\" className={\"file-input\"}  onChange={loadFile}/>\r\n                </label>\r\n\r\n                <Button className={\"reset\"} onClick={()=>{dispatch(resetSettings())}} type=\"primary\" danger>\r\n                    Reset\r\n                </Button>\r\n                <Button className={\"reset\"} onClick={()=>{back()}} type=\"primary\">\r\n                    <ArrowLeftOutlined />\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Setting"],"sourceRoot":""}