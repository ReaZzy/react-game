{"version":3,"sources":["sounds/wrong-audio.wav","sounds/correct-audio.wav","sounds/open-sound.wav","sounds/win.wav","sounds/lose.wav","redux/game-reducer.ts","redux/selectors/selectors.ts","components/Card/Card.tsx","components/Timer/Timer.tsx","components/Game/Game.tsx","sounds/music.mp3","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["initialState","board","boardDisabled","cardPair","gameType","musicVolume","soundsVolume","boardSize","games","imgURL","difficulty","time","score","highScore","openCardAudio","Audio","openAudio","wrongAnswerAudio","wrongAudio","correctAnswerAudio","correctAudio","winGameAudio","winAudio","loseGameAudio","loseAudio","Date","toLocaleDateString","split","month","date","year","openCard","number","type","setBoard","setAnswers","data","disableBoard","boolean","setGame","setCardPair","card","setCardPairs","cards","setMusicVolume","volume","setSoundsVolume","setBoardSize","setCardStyle","setDifficulty","setTimer","setScore","setHighScore","setGames","game","answer","dispatch","getState","a","wrong","play","setTimeout","correct","localStorage","setItem","JSON","stringify","length","content","every","e","setGameToStats","map","backOptions","boardItems","sort","Math","random","removeItem","backToMainMenu","refreshBoard","winOrLose","key","startGame","resetSettings","lose","setLocalStorage","localStorageCardPair","getItem","localStorageGameType","localStorageMusicVolume","localStorageSoundsVolume","localStorageBoardSize","localStorageImageURL","localStorageDifficulty","localStorageTimer","localStorageScore","localStorageHighScore","localStorageGames","lB","localStorageBoard","lT","lC","lMV","lSV","lBS","lMU","lD","lTM","lS","lHS","lG","parse","gameReducer","state","action","i","condition","boardSelector","disabledBoardSelector","cardPairSelector","getGameType","getSoundsVolume","getMusicVolume","getBoardSize","getImgURL","getDifficulty","getTime","getScore","getHighScore","getGames","Card","index","useDispatch","useSelector","className","onClick","src","alt","id","Timer","useEffect","timer","setInterval","clearInterval","size","danger","ClockCircleOutlined","Game","disabledBoard","to","Settings","React","lazy","Stats","App","history","useHistory","useSound","music","Number","interrupt","stop","toSettings","path","push","hotkeys","keyup","event","handler","Array","fill","render","fallback","href","rel","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9df9c233.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/wrong-audio.70fff5c7.wav\";","export default __webpack_public_path__ + \"static/media/correct-audio.62721562.wav\";","export default __webpack_public_path__ + \"static/media/open-sound.15057a5c.wav\";","export default __webpack_public_path__ + \"static/media/win.aa3ddaa5.wav\";","export default __webpack_public_path__ + \"static/media/lose.02ef6b82.wav\";","import {CardType} from \"../App\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n// @ts-ignore\r\nimport wrongAudio from \"./../sounds/wrong-audio.wav\"\r\n// @ts-ignore\r\nimport correctAudio from \"./../sounds/correct-audio.wav\"\r\n// @ts-ignore\r\nimport openAudio from \"./../sounds/open-sound.wav\"\r\n// @ts-ignore\r\nimport winAudio from \"./../sounds/win.wav\"\r\n// @ts-ignore\r\nimport loseAudio from \"./../sounds/lose.wav\"\r\n\r\nexport type GameType = {\r\n    key: number\r\n    date: string,\r\n    winOrLose: \"win\" | \"lose\"\r\n    boardSize: string\r\n    difficulty: string,\r\n    score: number,\r\n    time: number\r\n}\r\n\r\nconst initialState = {\r\n    board: [] as Array<CardType>,\r\n    boardDisabled: false,\r\n    cardPair: [] as Array<CardType>,\r\n    gameType: \"wait\" as \"wait\" | \"playing\" | \"win\" | \"lose\",\r\n    musicVolume: 1,\r\n    soundsVolume: 1,\r\n    boardSize: \"normal\",\r\n    games: [] as Array<GameType>,\r\n    imgURL: null as string | null,\r\n    difficulty: \"normal\",\r\n    time: 0,\r\n    score: 0,\r\n    highScore: 0,\r\n};\r\ntype initialStateType = typeof initialState;\r\n\r\n\r\n// AUDIO\r\nconst openCardAudio = new Audio(openAudio)\r\nconst wrongAnswerAudio = new Audio(wrongAudio)\r\nconst correctAnswerAudio = new Audio(correctAudio)\r\nconst winGameAudio = new Audio(winAudio)\r\nconst loseGameAudio = new Audio(loseAudio)\r\nlet [month, date, year]    = new Date().toLocaleDateString(\"en-US\").split(\"/\")\r\n\r\nconst gameReducer = (state = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET_BOARD\": {\r\n            return {\r\n                ...state,\r\n                board: [...action.board]\r\n            }\r\n        }\r\n        case \"OPEN_CARD\": {\r\n            openCardAudio.play()\r\n            return {\r\n                ...state,\r\n                board: state.board.map((board, i) => {\r\n                    return i === action.number ? {...board, type: \"open\"} : board\r\n                })\r\n            }\r\n        }\r\n        case \"SET_ANSWERS\": {\r\n            const {cardPair, type} = action.data\r\n            const condition = (e: CardType, type: \"wrong\" | \"correct\" | \"open\" | \"closed\") => {\r\n                return e.content === cardPair[0].content || e.content === cardPair[1].content\r\n                    ? {...e, type: type}\r\n                    : e\r\n            }\r\n            return {\r\n                ...state,\r\n                board: state.board.map((e: CardType) =>\r\n                    e.type === \"open\"\r\n                        ? condition(e, type)\r\n                        : e.type === \"wrong\" ? condition(e, type) : e\r\n                )\r\n            }\r\n        }\r\n        case \"SET_GAME_TYPE\": {\r\n            localStorage.setItem(\"gameType\", JSON.stringify(action.gameType))\r\n            return {...state, gameType: action.gameType}\r\n        }\r\n        case \"SET_BOARD_SIZE\": {\r\n            localStorage.setItem(\"boardSize\", `${action.boardSize}`)\r\n            return {...state, boardSize: action.boardSize}\r\n        }\r\n        case \"DISABLE_BOARD\": {\r\n            return {...state, boardDisabled: action.boolean}\r\n        }\r\n        case \"SET_SOUNDS_VOLUME\": {\r\n            return {...state, soundsVolume: action.volume}\r\n        }\r\n        case \"SET_MUSIC_VOLUME\": {\r\n            return {...state, musicVolume: action.volume}\r\n        }\r\n        case \"SET_CARD_PAIR\": {\r\n            return {...state, cardPair: [...state.cardPair, action.card]}\r\n        }\r\n        case \"SET_CARD_STYLE\": {\r\n            return {...state, imgURL: action.imgURL}\r\n        }\r\n        case \"SET_CARD_PAIRS\": {\r\n            return {...state, cardPair: [...action.cards]}\r\n        }\r\n        case \"SET_DIFFICULTY\": {\r\n            localStorage.setItem(\"difficulty\", `${action.difficulty}`)\r\n            return {...state, difficulty: action.difficulty}\r\n        }\r\n        case \"SET_TIMER\": {\r\n            return {...state, time: action.time}\r\n        }\r\n        case \"SET_SCORE\":{\r\n            return {...state, score: action.score}\r\n        }\r\n        case \"SET_HIGH_SCORE\":{\r\n            return {...state, highScore: action.score}\r\n        }\r\n        case \"SET_GAMES\":{\r\n            return {...state, games: [action.game, ...state.games]}\r\n        }\r\n        case \"SET_ALL_GAMES\":{\r\n            return {...state, games: action.games}\r\n        }\r\n\r\n        case \"CLEAR_CARD_PAIR\": {\r\n            return {...state, cardPair: []}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\ntype ActionsType =\r\n    openCardType\r\n    | setBoardType\r\n    | setAnswersType\r\n    | disableBoardType\r\n    | clearCardPairType\r\n    | setCardPairType\r\n    | setGameType\r\n    | setCardPairsType\r\n    | setSoundsVolumeType\r\n    | setMusicVolumeType\r\n    | setBoardSizeType\r\n    | setCardStyleType\r\n    | setDifficultyType\r\n    | setScoreType\r\n    | setTimerType\r\n    | setHighScoreType\r\n    | setGamesType\r\n    | setAllGamesType\r\n\r\nexport const openCard = (number: number): openCardType => ({\r\n    type: \"OPEN_CARD\",\r\n    number,\r\n});\r\ntype openCardType = {\r\n    type: \"OPEN_CARD\";\r\n    number: number;\r\n};\r\n\r\nexport const setBoard = (board: Array<CardType>): setBoardType => ({\r\n    type: \"SET_BOARD\",\r\n    board,\r\n});\r\ntype setBoardType = {\r\n    type: \"SET_BOARD\";\r\n    board: Array<CardType>;\r\n};\r\n\r\nexport const setAnswers = (cardPair: Array<CardType>, type: \"wrong\" | \"correct\" | \"closed\" | \"open\"): setAnswersType => ({\r\n    type: \"SET_ANSWERS\",\r\n    data: {\r\n        cardPair, type\r\n    }\r\n})\r\ntype setAnswersType = {\r\n    type: \"SET_ANSWERS\";\r\n    data: {\r\n        cardPair: Array<CardType>,\r\n        type: \"wrong\" | \"correct\" | \"closed\" | \"open\"\r\n    }\r\n}\r\n\r\nexport const disableBoard = (boolean: boolean): disableBoardType => ({type: \"DISABLE_BOARD\", boolean})\r\ntype disableBoardType = { type: \"DISABLE_BOARD\", boolean: boolean }\r\nexport const setGame = (gameType: \"wait\" | \"playing\" | \"win\" | \"lose\"): setGameType => ({\r\n    type: \"SET_GAME_TYPE\",\r\n    gameType\r\n})\r\ntype setGameType = { type: \"SET_GAME_TYPE\", gameType: \"wait\" | \"playing\" | \"win\" | \"lose\" }\r\nexport const setCardPair = (card: CardType): setCardPairType => ({type: \"SET_CARD_PAIR\", card})\r\ntype setCardPairType = { type: \"SET_CARD_PAIR\", card: CardType }\r\nexport const setCardPairs = (cards: Array<CardType>): setCardPairsType => ({type: \"SET_CARD_PAIRS\", cards})\r\ntype setCardPairsType = { type: \"SET_CARD_PAIRS\", cards: Array<CardType> }\r\nconst clearCardPair = (): clearCardPairType => ({type: \"CLEAR_CARD_PAIR\"})\r\ntype clearCardPairType = { type: \"CLEAR_CARD_PAIR\" }\r\nexport const setMusicVolume = (volume: number): setMusicVolumeType => ({type: \"SET_MUSIC_VOLUME\", volume})\r\ntype setMusicVolumeType = { type: \"SET_MUSIC_VOLUME\", volume: number }\r\nexport const setSoundsVolume = (volume: number): setSoundsVolumeType => ({type: \"SET_SOUNDS_VOLUME\", volume})\r\ntype setSoundsVolumeType = { type: \"SET_SOUNDS_VOLUME\", volume: number }\r\nexport const setBoardSize = (boardSize: string): setBoardSizeType => ({type: \"SET_BOARD_SIZE\", boardSize})\r\ntype setBoardSizeType = { type: \"SET_BOARD_SIZE\", boardSize: string }\r\nexport const setCardStyle = (imgURL: string): setCardStyleType => ({type: \"SET_CARD_STYLE\", imgURL})\r\ntype setCardStyleType = { type: \"SET_CARD_STYLE\", imgURL: string }\r\nexport const setDifficulty = (difficulty: string): setDifficultyType => ({type: \"SET_DIFFICULTY\", difficulty})\r\ntype setDifficultyType = { type: \"SET_DIFFICULTY\", difficulty: string }\r\nexport const setTimer = (time: number): setTimerType => ({type: \"SET_TIMER\", time})\r\ntype setTimerType = { type: \"SET_TIMER\", time: number }\r\nexport const setScore = (score: number): setScoreType => ({type: \"SET_SCORE\", score})\r\ntype setScoreType = { type: \"SET_SCORE\", score: number }\r\nexport const setHighScore = (score: number): setHighScoreType => ({type: \"SET_HIGH_SCORE\", score})\r\ntype setHighScoreType = { type: \"SET_HIGH_SCORE\", score: number }\r\nexport const setGames = (game: GameType): setGamesType => ({type: \"SET_GAMES\", game})\r\ntype setGamesType = { type: \"SET_GAMES\", game: GameType }\r\nexport const setAllGames = (games: Array<GameType>): setAllGamesType => ({type: \"SET_ALL_GAMES\", games})\r\ntype setAllGamesType = { type: \"SET_ALL_GAMES\", games: Array<GameType>}\r\n\r\nexport const answer = (cardPair: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n\r\n    const {game} = getState()\r\n\r\n    openCardAudio.volume = game.soundsVolume\r\n    wrongAnswerAudio.volume = game.soundsVolume\r\n    correctAnswerAudio.volume = game.soundsVolume\r\n    winGameAudio.volume = game.soundsVolume\r\n    loseGameAudio.volume = game.soundsVolume\r\n\r\n    const wrong = () => {\r\n        wrongAnswerAudio.play()\r\n        dispatch(disableBoard(true))\r\n        dispatch(setAnswers(cardPair, \"wrong\"))\r\n        setTimeout(() => {\r\n            dispatch(setAnswers(cardPair, \"closed\"))\r\n            dispatch(disableBoard(false))\r\n        }, 1000)\r\n    }\r\n    const  correct =  async () => {\r\n        await correctAnswerAudio.play()\r\n        dispatch(setAnswers(cardPair, \"correct\"))\r\n        dispatch(setScore(game.score+2))\r\n        if(game.score >= game.highScore){\r\n            dispatch(setHighScore(game.score+2))\r\n            localStorage.setItem(\"highScore\", JSON.stringify(game.score+2))\r\n        }\r\n    }\r\n\r\n    if (cardPair.length === 2) {\r\n        cardPair[0].content === cardPair[1].content\r\n            ? correct()\r\n            : wrong()\r\n        dispatch(clearCardPair())\r\n    }\r\n\r\n    if (game.board.every((e: CardType) => e.type === \"correct\")) {\r\n        dispatch(setGame(\"win\"))\r\n        await dispatch(setGameToStats(\"win\"))\r\n        await winGameAudio.play()\r\n    }\r\n\r\n    localStorage.setItem(\"board\", JSON.stringify(game.board.map((e: CardType) => e.type === \"wrong\" ? {\r\n        content: e.content,\r\n        type: \"closed\"\r\n    } : e)))\r\n    localStorage.setItem(\"cardPair\", JSON.stringify(cardPair))\r\n    localStorage.setItem(\"score\", JSON.stringify(game.score))\r\n}\r\n\r\n\r\n\r\nconst backOptions = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n    const {game} = getState()\r\n    dispatch(setCardPairs([]))\r\n    dispatch(setScore(0))\r\n    dispatch(setBoard([...boardItems, ...boardItems].sort(() => 0.5 - Math.random())))\r\n    dispatch(setTimer(game.difficulty === \"easy\" ? 60 : game.difficulty === \"normal\" ? 50 : 30))\r\n    localStorage.removeItem(\"cardPair\")\r\n}\r\nexport const backToMainMenu = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n    dispatch(backOptions(boardItems))\r\n    dispatch(setGame(\"wait\"))\r\n    localStorage.removeItem(\"board\")\r\n}\r\nexport const refreshBoard = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n    openCardAudio.play()\r\n    dispatch(backOptions(boardItems))\r\n}\r\nconst setGameToStats = (winOrLose: \"win\" | \"lose\"): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch, getState) => {\r\n    const {game} = getState()\r\n    dispatch(setGames({\r\n        key: Math.random(),\r\n        date: `${month}/${date}/${year}`,\r\n        boardSize: game.boardSize,\r\n        difficulty: game.difficulty,\r\n        score: game.score,\r\n        winOrLose: winOrLose,\r\n        time: (game.difficulty === \"easy\" ? 60 : game.difficulty === \"normal\" ? 50 : 30) - game.time\r\n    }))\r\n    localStorage.setItem(\"games\", JSON.stringify([{\r\n        key: Math.random(),\r\n        date: `${month}/${date}/${year}`,\r\n        boardSize: game.boardSize,\r\n        difficulty: game.difficulty,\r\n        score: game.score,\r\n        winOrLose: winOrLose,\r\n        time: (game.difficulty === \"easy\" ? 60 : game.difficulty === \"normal\" ? 50 : 30) - game.time\r\n    }, ...game.games]))\r\n}\r\n\r\nexport const startGame = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    dispatch(setGame(\"playing\"))\r\n    dispatch(backOptions(boardItems))\r\n}\r\nexport const resetSettings = (): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    dispatch(setCardStyle(\"\"))\r\n    dispatch(setDifficulty(\"normal\"))\r\n    dispatch(setBoardSize(\"normal\"))\r\n    dispatch(setMusicVolume(1))\r\n    dispatch(setSoundsVolume(1))\r\n    localStorage.removeItem(\"imgURL\")\r\n    localStorage.removeItem(\"musicVolume\")\r\n    localStorage.removeItem(\"soundsVolume\")\r\n}\r\nexport const lose = (): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    dispatch(setGame(\"lose\"))\r\n    await dispatch(setGameToStats(\"lose\"))\r\n    await loseGameAudio.play()\r\n}\r\n\r\nexport const setLocalStorage = (boardItems: Array<CardType>): ThunkAction<Promise<void>, AppStateType, unknown, ActionsType> => async (dispatch) => {\r\n    const localStorageBoard = (): string | null => localStorage.getItem(\"board\")\r\n    const localStorageCardPair = (): string | null => localStorage.getItem(\"cardPair\")\r\n    const localStorageGameType = (): string | null => localStorage.getItem(\"gameType\")\r\n    const localStorageMusicVolume = (): string | null => localStorage.getItem(\"musicVolume\")\r\n    const localStorageSoundsVolume = (): string | null => localStorage.getItem(\"soundsVolume\")\r\n    const localStorageBoardSize = (): string | null => localStorage.getItem(\"boardSize\")\r\n    const localStorageImageURL = (): string | null => localStorage.getItem(\"imgURL\")\r\n    const localStorageDifficulty = (): string | null => localStorage.getItem(\"difficulty\")\r\n    const localStorageTimer = (): string | null => localStorage.getItem(\"timer\")\r\n    const localStorageScore = (): string | null => localStorage.getItem(\"score\")\r\n    const localStorageHighScore = (): string | null => localStorage.getItem(\"highScore\")\r\n    const localStorageGames = (): string | null => localStorage.getItem(\"games\")\r\n    const lB = localStorageBoard()\r\n    const lT = localStorageGameType()\r\n    const lC = localStorageCardPair()\r\n    const lMV = localStorageMusicVolume()\r\n    const lSV = localStorageSoundsVolume()\r\n    const lBS = localStorageBoardSize()\r\n    const lMU = localStorageImageURL()\r\n    const lD = localStorageDifficulty()\r\n    const lTM = localStorageTimer()\r\n    const lS = localStorageScore()\r\n    const lHS = localStorageHighScore()\r\n    const lG = localStorageGames()\r\n    lC && dispatch(setCardPairs(JSON.parse(lC)))\r\n    lT && dispatch(setGame(JSON.parse(lT)))\r\n    lMV && dispatch(setMusicVolume(JSON.parse(lMV)))\r\n    lSV && dispatch(setSoundsVolume(JSON.parse(lSV)))\r\n    lMU && dispatch(setCardStyle(lMU))\r\n    lD && dispatch(setDifficulty(lD))\r\n    lBS && dispatch(setBoardSize(lBS))\r\n    lTM && dispatch(setTimer(+lTM))\r\n    lS && dispatch(setScore(+lS))\r\n    lHS && dispatch(setHighScore(+lHS))\r\n    lG && dispatch(setAllGames(JSON.parse(lG)))\r\n    lB\r\n        ? dispatch(setBoard(JSON.parse(lB)))\r\n        : dispatch(setBoard([...boardItems, ...boardItems].sort(() => 0.5 - Math.random())))\r\n}\r\n\r\nexport default gameReducer","import {AppStateType} from \"../store\";\r\n\r\nexport const boardSelector = (state:AppStateType)=> {\r\n    return state?.game?.board\r\n}\r\n\r\nexport const disabledBoardSelector = (state:AppStateType) => {\r\n    return state?.game?.boardDisabled\r\n}\r\nexport const cardPairSelector = (state:AppStateType) => {\r\n    return state?.game?.cardPair\r\n}\r\nexport const getGameType = (state:AppStateType) => {\r\n    return state?.game?.gameType\r\n}\r\nexport const getSoundsVolume = (state:AppStateType) => {\r\n    return state?.game?.soundsVolume\r\n}\r\nexport const getMusicVolume = (state:AppStateType) => {\r\n    return state?.game?.musicVolume\r\n}\r\nexport const getBoardSize = (state:AppStateType) => {\r\n    return state?.game?.boardSize\r\n}\r\nexport const getImgURL = (state:AppStateType) => {\r\n    return state?.game?.imgURL\r\n}\r\nexport const getDifficulty = (state:AppStateType) => {\r\n    return state?.game?.difficulty\r\n}\r\nexport const getTime = (state:AppStateType) => {\r\n    return state?.game?.time\r\n}\r\nexport const getScore = (state:AppStateType) => {\r\n    return state?.game?.score\r\n}\r\nexport const getHighScore = (state:AppStateType) => {\r\n    return state?.game?.highScore\r\n}\r\nexport const getGames = (state:AppStateType) => {\r\n    return state?.game?.games\r\n}\r\n","import React from \"react\";\r\nimport {CardType} from \"../../App\";\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {openCard, setCardPair} from \"../../redux/game-reducer\";\r\nimport {getImgURL} from \"../../redux/selectors/selectors\";\r\n\r\ntype CardComponentType = {\r\n    card: CardType;\r\n    index: number;\r\n    cardPair: Array<CardType>\r\n};\r\n\r\n\r\n\r\nexport const Card: React.FC<CardComponentType> = (\r\n    {card, index}\r\n    ) => {\r\n    const dispatch = useDispatch()\r\n    const imgURL = useSelector(getImgURL)\r\n\r\n    const handleClick = (i: number) => {\r\n        if(card.type === \"closed\"){\r\n            dispatch(openCard(i))\r\n            dispatch(setCardPair(card))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`noselect card ${card.type}`}\r\n               onClick={() => handleClick(index)}>\r\n            <div className={\"content\"}>\r\n                <div className={\"front\"}> {card.type !== \"closed\" && `${card.content}`} </div>\r\n                <div className={\"back noselect\"}> {imgURL && <img src={`${imgURL}`} alt={\"card\"} id={\"output\"}/>} </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getTime} from \"../../redux/selectors/selectors\";\r\nimport {lose, setTimer} from \"../../redux/game-reducer\";\r\nimport {Button} from \"antd\";\r\nimport { ClockCircleOutlined } from \"@ant-design/icons\";\r\n\r\nexport const Timer:React.FC<{}> = () => {\r\n    const time = useSelector(getTime)\r\n    const dispatch = useDispatch()\r\n    useEffect(()=>{\r\n        const timer = setInterval(()=>{\r\n            if (time > 0){\r\n                localStorage.setItem(\"timer\", `${time-1}`)\r\n                dispatch(setTimer(time-1))\r\n            }\r\n            else{\r\n                dispatch(lose())\r\n            }\r\n        }, 1000)\r\n        return ()=>{\r\n            clearInterval(timer)\r\n        }\r\n    }, [time]) //eslint-disable-line\r\n\r\n    return(\r\n        <Button size={\"large\"} className={\"timer\"} danger = {time < 10}>\r\n            <ClockCircleOutlined /> {time}\r\n        </Button>\r\n    )\r\n}","import React from \"react\";\r\nimport {Card} from \"../Card/Card\";\r\nimport {Button} from \"antd\";\r\nimport {backToMainMenu, refreshBoard, startGame} from \"../../redux/game-reducer\";\r\nimport {CardType} from \"../../App\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    boardSelector,\r\n    cardPairSelector,\r\n    disabledBoardSelector,\r\n    getBoardSize,\r\n    getGameType, getHighScore, getScore\r\n} from \"../../redux/selectors/selectors\";\r\nimport {ArrowLeftOutlined, BarChartOutlined, CaretRightOutlined, ReloadOutlined, SettingOutlined} from \"@ant-design/icons/lib\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Timer} from \"../Timer/Timer\";\r\n\r\nexport const Game: React.FC<{boardItems:Array<CardType>}> = ({boardItems}) => {\r\n\r\n    const disabledBoard = useSelector(disabledBoardSelector)\r\n    const dispatch = useDispatch()\r\n    const gameType = useSelector(getGameType)\r\n    const board = useSelector(boardSelector)\r\n    const cardPair = useSelector(cardPairSelector)\r\n    const boardSize = useSelector(getBoardSize)\r\n    const score = useSelector(getScore)\r\n    const highScore = useSelector(getHighScore)\r\n\r\n    return (\r\n        <div>\r\n            {gameType === \"playing\"\r\n                ? <div className=\"appContent\">\r\n                    <div className=\"score\">\r\n                        <Button size={\"large\"}>Current score: {score}</Button>\r\n                        <Button size={\"large\"}>High score: {highScore}</Button>\r\n                        <Timer/>\r\n                    </div>\r\n                    <div className={`board ${boardSize} ${disabledBoard && \"disabled\"}`}>\r\n                        {board?.map((card: CardType, index: number) => {\r\n                            return (\r\n                                <Card cardPair={cardPair}\r\n                                      index={index}\r\n                                      card={card}\r\n                                      key={index}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                    <Button onClick={() => {\r\n                        dispatch(refreshBoard(boardItems))\r\n                    }} className={\"reset-button\"} type=\"primary\" size={\"large\"}>\r\n                        <ReloadOutlined/>\r\n                    </Button>\r\n                    <Button onClick={() => {\r\n                        dispatch(backToMainMenu(boardItems))\r\n                    }} className={\"reset-button\"} type=\"primary\" size={\"large\"}>\r\n                        <ArrowLeftOutlined/>\r\n                    </Button>\r\n                </div>\r\n\r\n                : <div className={`menu ${gameType} ${boardSize}`}>\r\n                    <div className={\"menu-content\"}>\r\n                        <div className={\"text\"}>\r\n                            <div className={\"end-text\"}>\r\n                                {gameType === \"win\"\r\n                                    ? \"You won !\"\r\n                                    : gameType === \"lose\"\r\n                                        ? \"You lose :(\"\r\n                                        : gameType === \"wait\"\r\n                                        && \"Memory game\"\r\n                                }\r\n                            </div>\r\n                            <div>\r\n                                <div className={\"small-text\"}>\r\n                                    High score: {highScore}\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div>\r\n                            <Button type=\"primary\" size={\"large\"} onClick={() => {\r\n                                dispatch(startGame(boardItems))\r\n                            }}>\r\n                                {gameType !== \"wait\" ? \"Play again\" : \"Play\"} <CaretRightOutlined/>\r\n                            </Button>\r\n                            <Button type=\"primary\" size={\"large\"} onClick={()=>{dispatch(backToMainMenu(boardItems))}}>\r\n                                <Link to={\"/settings\"}><SettingOutlined/></Link>\r\n                            </Button>\r\n                            <Button type=\"primary\" size={\"large\"} onClick={()=>{dispatch(backToMainMenu(boardItems))}}>\r\n                                <Link to={\"/stats\"}><BarChartOutlined /></Link>\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/music.601c07ae.mp3\";","import React, {Suspense, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    answer, backToMainMenu, refreshBoard,\n    setLocalStorage, startGame,\n} from \"./redux/game-reducer\";\nimport {\n    boardSelector,\n    cardPairSelector,\n    getBoardSize,\n    getGameType,\n    getMusicVolume\n} from \"./redux/selectors/selectors\";\nimport {Route, Switch, useHistory} from \"react-router-dom\"\nimport {Game} from \"./components/Game/Game\";\nimport useSound from \"use-sound\";\nimport {GithubOutlined} from \"@ant-design/icons/lib\";\n//@ts-ignore\nimport music from \"./sounds/music.mp3\"\nimport hotkeys from \"hotkeys-js\";\n\n\nexport type CardType = {\n    content: string;\n    type: \"open\" | \"closed\" | \"wrong\" | \"correct\";\n};\n\nconst Settings = React.lazy(()=> import(\"./components/Settings/Settings\"))\nconst Stats = React.lazy(()=> import(\"./components/Stats/Stats\"))\n\nfunction App() {\n    const dispatch = useDispatch()\n    const gameType = useSelector(getGameType)\n    const board = useSelector(boardSelector)\n    const cardPair = useSelector(cardPairSelector)\n    const musicVolume = useSelector(getMusicVolume)\n    const boardSize = useSelector(getBoardSize)\n    const history = useHistory()\n    const [play, {stop}] = useSound(music, {volume: Number(localStorage.getItem(\"musicVolume\") || musicVolume) , interrupt: true})\n    useEffect(()=>{\n        gameType===\"wait\"?play():stop()\n    },[play,gameType]) // eslint-disable-line\n    useEffect(() => {\n       dispatch(setLocalStorage(boardItems))\n    }, []) // eslint-disable-line\n    useEffect(() => {\n        dispatch(answer([...cardPair]))\n    }, [board]) // eslint-disable-line\n    useEffect(()=>{\n        const toSettings = (path:string) => {\n            dispatch(backToMainMenu(boardItems))\n            history.push(path)\n        }\n        const startGameHotKey = () => {\n            dispatch(startGame(boardItems))\n            history.push(\"/\")\n        }\n        hotkeys('ctrl+x,ctrl+z,ctrl+c,ctrl+enter,ctrl+v',{keyup: true},function (event, handler){\n            switch (handler.key) {\n                case 'ctrl+x': event.type === 'keyup' &&  toSettings(\"settings\")\n                    break;\n                case 'ctrl+z': event.type === 'keyup' && toSettings(\"\")\n                    break;\n                case 'ctrl+c': event.type === 'keyup' && toSettings(\"stats\")\n                    break;\n                case 'ctrl+enter': event.type === 'keyup' && startGameHotKey()\n                    break;\n                case 'ctrl+v': event.type === 'keyup' && dispatch(refreshBoard(boardItems))\n                    break;\n                default: break;\n            }\n        })\n    },[boardSize]) //eslint-disable-line\n\n\n    const boardItemsCount = boardSize === \"small\" ? 4 : boardSize === \"normal\" ? 8 : boardSize === \"big\" ? 10 : 18\n    const boardItems: Array<CardType> = Array(boardItemsCount).fill(0).map((e:number,index:number) => ({content:`${index}`, type:\"closed\"}))\n\n    return (\n        <div className=\"App\">\n            <div className={\"game\"}>\n                <Switch>\n                    <Route  path={\"/settings\"} render={()=><Suspense fallback={<div>Loading</div>}><Settings /></Suspense>}/>\n                    <Route  path={\"/stats\"} render={()=><Suspense fallback={<div>Loading</div>}><Stats /></Suspense>}/>\n                    <Route  path={\"/\"} render={()=><Game boardItems={boardItems}/>}/>\n                    <Route  path={\"*\"} render={()=><h1>404</h1>}/>\n                </Switch>\n            </div>\n            <footer>\n                <a href={\"https://rs.school/react/\"} rel={\"noreferrer\"} target={\"_blank\"}>\n                    <img src={\"https://rs.school/images/rs_school_js.svg\"}  alt={\"course-logo\"}/>\n                </a>\n                <b>2021</b>\n                <a href={\"https://github.com/ReaZzy\"} rel={\"noreferrer\"} target={\"_blank\"}><GithubOutlined className={\"githubSvg\"}/></a>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport gameReducer from \"./game-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    game: gameReducer,\r\n});\r\ntype reducersType = typeof reducers;\r\nexport type AppStateType = ReturnType<reducersType>;\r\n\r\n//@ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nlet store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport 'antd/dist/antd.css';\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <HashRouter>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}